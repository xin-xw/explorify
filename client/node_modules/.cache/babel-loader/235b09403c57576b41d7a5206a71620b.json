{"ast":null,"code":"var _jsxFileName = \"/Users/xinwng/Projects/Explorify/client/src/explorify.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles, Box, Card, CardContent, Grid, Typography, Button, ThemeProvider, createMuiTheme, CssBaseline, Avatar } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport SearchBar from \"./component/search_bar\";\nimport RecBoards from \"./component/rec_boards\";\nimport RecommendationResults from \"./component/rec_results\";\nimport GetUserData from \"./component/get_user_data\"; // import ExportToPlaylist from \"./component/export_to_playlist\";\n// const querystring = require(\"querystring\");\n\nimport acousticness from \"./icon/acousticness.png\";\nimport danceability from \"./icon/danceability.png\";\nimport instrumental from \"./icon/instrumental.png\";\nimport loudness2 from \"./icon/loudness2.png\";\nimport popularity from \"./icon/popularity.png\";\nimport tempo from \"./icon/tempo.png\";\nimport valence from \"./icon/valence.png\";\nimport liveness from \"./icon/liveness.png\";\nimport speechiness from \"./icon/speechiness.png\";\nimport energy from \"./icon/energy.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Inter\", \"Kiwi Maru\"]\n  },\n  palette: {\n    background: {\n      default: \"#6b705c\"\n    }\n  },\n  props: {\n    MuiButtonBase: {\n      disableRipple: true\n    }\n  },\n  typography: {\n    allVariants: {\n      color: \"white\"\n    }\n  },\n  overrides: {\n    MuiSlider: {\n      root: {\n        // color: \"#3880ff\",\n        height: 5,\n        padding: \"15px 0\",\n        width: \"95%\" // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n\n      },\n      switchBase: {// Controls default (unchecked) color for the thumb\n        // color: \"#ccc\",\n      },\n      colorSecondary: {\n        \"&$checked\": {\n          // Controls checked color for the thumb\n          color: \"#f2ff00\"\n        }\n      },\n      thumb: {\n        height: 13,\n        width: 13,\n        // size: 50,\n        // marginTop: -8,\n        // marginLeft: -12,\n        // color: \"#2B2D25\",\n        border: \"5px solid currentColor\",\n        \"&:focus, &:hover, &$active\": {\n          boxShadow: \"inherit\"\n        },\n        \"&$disabled\": {\n          opacity: 0.8 // color: \"#e6e4df\",\n\n        }\n      },\n      track: {\n        // color: \"#2B2D25\",\n        height: 5,\n        borderRadius: 4 // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n\n      },\n      rail: {\n        color: \"#FFE8D6\",\n        height: 5,\n        borderRadius: 4 // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n\n      },\n      valueLabel: {\n        left: \"calc(-50% - 12px)\",\n        color: \"#2B2D25\"\n      }\n    }\n  }\n});\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    padding: 10,\n    spacing: 10,\n    alignItems: \"center\",\n    direction: \"row\"\n  },\n  gridItem: {\n    backgroundColor: \"#FFB4A2\",\n    background: \"#000\",\n    color: \"#000\"\n  },\n  nav_title: {\n    padding: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    placeItems: \"left\",\n    fontSize: \"1.5rem\",\n    fontFamily: \"Kiwi Maru\"\n  },\n  step_root: {\n    // align: \"center\",\n    padding: 10,\n    maxWidth: 1000,\n    marginBottom: 50,\n    backgroundColor: \"#ddbea9\",\n    borderRadius: 10\n  },\n  step_header: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.55em\",\n    marginBottom: 10,\n    fontWeight: \"600\"\n  },\n  step_desc: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.1em\",\n    marginBottom: 20\n  },\n  card: {// backgroundColor: \"FFB4A2\",\n  },\n  card_content: {// backgroundColor: \"#FFB4A2\",\n  },\n  track_attribute_card_1: {\n    width: \"275px\",\n    height: \"400px\",\n    marginBottom: 30,\n    borderRadius: 10\n  },\n  track_attribute_font_title: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\"\n  },\n  track_attribute_font_title_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\"\n  },\n  track_attribute_font_type: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\"\n  },\n  track_attribute_font_type_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\"\n  },\n  track_attribute_font_content: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#18181F\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.2em\",\n    textAlign: \"justify\"\n  },\n  track_attribute_font_content_2: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#e6e4df\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.13em\",\n    textAlign: \"justify\" // lineSpacing: \"10\",\n\n  },\n  track_attribute_image: {\n    margin: 10,\n    width: theme.spacing(9),\n    height: theme.spacing(9)\n  }\n}));\n\nconst Explorify = ({\n  auth\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    token\n  } = auth;\n  const [user_id, set_user_id] = useState(\"\");\n  const [rec_values, set_rec_values] = useState([]);\n  const [results, set_results] = useState(null);\n  const [results_data, set_results_data] = useState([]);\n  const [result_uri, set_result_uri] = useState(\"\");\n  const [selected_seeds, set_selected_seeds] = useState([]);\n  const [playlist_id, set_playlist_id] = useState(\"\");\n  console.log(\"rv\", rec_values);\n  console.log(\"user_id\", user_id);\n  console.log(\"results\");\n\n  const get_recommendations = async () => {\n    const url = \"https://api.spotify.com/v1/recommendations\";\n    let seed_string;\n\n    if (seed_string < 0) {\n      return;\n    } else {\n      seed_string = `seed_tracks=${selected_seeds.join(\",\")}`;\n    }\n\n    let min = [];\n    let max = [];\n    Object.keys(rec_values).forEach(rec => {\n      if (rec_values[rec].enabled) {\n        min.push(`min_${rec}=${rec_values[rec].value[0]}`);\n        max.push(`min_${rec}=${rec_values[rec].value[1]}`);\n      }\n    });\n    const min_string = min.join(\"&\");\n    const max_string = max.join(\"&\");\n    const {\n      data\n    } = await axios.get(`${url}?${seed_string}&${min_string}&${max_string}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    set_results(data);\n    console.log(\"data\", data, results); // const uri = results.tracks.map((r) => \"spotify:track:\" + r.id);\n    // console.log(uri);\n  };\n\n  const create_playlist = async () => {\n    const url = \"https://api.spotify.com/v1/users/\";\n    const playlist_name = \"brought to you by explorify\"; // const playlist_desc = \"generated at \";\n\n    return await axios.post(`${url}${user_id}/playlists`, JSON.stringify({\n      name: playlist_name // epd,\n\n    }), {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(data => set_playlist_id(data.data.id)); // set_playlist_id(data.id);\n    // return export_to_playlist();\n\n    /* Add songs to playlist */\n  }; // const export_to_playlist = async () => {\n\n\n  async function export_to_playlist() {\n    // const playlist_id = await set_playlist_id;\n    console.log(playlist_id);\n    const url = \"https://api.spotify.com/v1/playlists/\";\n    const uri = results.tracks.map(r => \"spotify:track:\" + r.id);\n    const euri = encodeURIComponent(uri);\n    console.log(uri);\n    return await axios.post(`${url}${playlist_id}/tracks?uris=${euri}`, null, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(data => console.log(\"success\", data)); // if (data) {\n    //   console.log(\"success\", data);\n    // }\n  }\n\n  function handle_create_and_export() {\n    create_playlist();\n    setTimeout(function () {\n      export_to_playlist();\n    }, 15000);\n    console.log(\"pid\", playlist_id); // export_to_playlist();\n  }\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.gridContainer,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: \"classes.gridItem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GetUserData, {\n          auth: auth,\n          onChange: set_user_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.card,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.step_root,\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.card_content,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.step_header,\n                children: \"Step 1: Input Your Seeds\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.step_desc,\n                children: [\"Include up to 5 \\\"seeds\\\", these seeds will serve as reference tracks for the basis of your new set of recommended songs.\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 19\n                }, this), \"Go ahead and search for some songs! When you are done, scroll down to the next step.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n                auth: auth,\n                onChange: set_selected_seeds\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.step_root,\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.step_header,\n                children: \"Step 2: Fine Tune Your Track Attributes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.step_desc,\n                style: {\n                  paddingBottom: 15\n                },\n                children: [\"In this step, you have the ability to fine tune specific track attributes that you want to look for in your recommended songs. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 26\n                }, this), \" First learn about the attributes. Then, scroll down and select the track attributes you want to modify. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 27\n                }, this), \"Lastly, drag the min or max sliders to really specify your desired range!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                spacing: 2,\n                style: {// paddingLeft: 45,\n                },\n                justify: \"center\",\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#BDBAD5\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title,\n                        children: \"acousticness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 386,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: acousticness,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 391,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type,\n                          children: \"type: context\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 397,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 396,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content,\n                        children: [\"tracks with \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 406,\n                          columnNumber: 39\n                        }, this), \" acousticness indicate tracks with \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"more\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 407,\n                          columnNumber: 32\n                        }, this), \" featurings of guitars, pianos, drumsets, etc. whereas, \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"lower\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 408,\n                          columnNumber: 51\n                        }, this), \" acousticness indicate tracks with\", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \" more\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 410,\n                          columnNumber: 27\n                        }, this), \" featurings of electronic or synthesized elements.\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 403,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#124E78\",\n                      color: \"#fff\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title_2,\n                        children: \"danceability\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 422,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: danceability,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 427,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type_2,\n                          children: \"type: mood\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 433,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 432,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content_2,\n                        children: \"an overall measurement of a track's suitability for dancing based on musical elements including tempo, rhythm, beat strength, and more.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 439,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#F49D6E\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title,\n                        children: \"energy\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 455,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: energy,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 460,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type,\n                          children: \"type: mood\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 466,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 465,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content,\n                        children: [\"an overall measurement of a track's intensity & activity. \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 476,\n                          columnNumber: 37\n                        }, this), \" energy will restrict results to fast, loud, and noisy songs. psst: heavy metal = higher energy & mozart = lower energy\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 472,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#F2CD5D\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title,\n                        children: \"instrumentalness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 489,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: instrumental,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 494,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type,\n                          children: \"type: properties\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 500,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 499,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content,\n                        children: \"predicts whether a track contains vocals. rap songs are more vocal, whereas lofi study music are less vocal. the higher the value, the more likely the track contains NO vocal content.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 506,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 488,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 484,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#C0D6DF\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title,\n                        children: \"liveness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 523,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: liveness,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 528,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type,\n                          children: \"type: context\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 534,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 533,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content,\n                        children: [\"liveness detects the presence of an audience in the recording. \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 544,\n                          columnNumber: 38\n                        }, this), \" liveness will lead you to more tracks that was probably performed live. increase this value if you want to find tracks that are straight from an artist's concert.\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 540,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 522,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#FFA69E\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title,\n                        children: \"loudness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 558,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: loudness2,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 563,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type,\n                          children: \"type: properties\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 569,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 568,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content,\n                        children: \"loudness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 575,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 557,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#BB342F\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title_2,\n                        children: \"popularity\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 589,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: popularity,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 594,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type_2,\n                          children: \"type: other\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 600,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 599,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content_2,\n                        children: [\"popularity provides a measure of - well - how popular you want the tracks in your results to be. set it\", \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"lower\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 611,\n                          columnNumber: 27\n                        }, this), \" if you want to discover more low-key songs, and set it \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 612,\n                          columnNumber: 45\n                        }, this), \" if you want to continue jamming out to tracks just as popular as Despacito or Gangnam Style.\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 606,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 588,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 584,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#758E4F\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title_2,\n                        children: \"speechiness\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 625,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: speechiness,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 630,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type_2,\n                          children: \"type: properties\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 636,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 635,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content_2,\n                        children: [\"kind of similar to instrumental, but inverse. setting speechiness to a \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 646,\n                          columnNumber: 44\n                        }, this), \" value will lead you to songs that have a \", /*#__PURE__*/_jsxDEV(\"i\", {\n                          children: \"higher\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 647,\n                          columnNumber: 45\n                        }, this), \" amount of spoken words. psst: setting this high will get you songs like Rap God by Eminem.\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 642,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 624,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 620,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 619,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#AA4465\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title_2,\n                        children: \"tempo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 660,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: tempo,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 665,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type_2,\n                          children: \"type: mood\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 671,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 670,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content_2,\n                        children: \"tempo means beats per minute! setting a tempo range = beats per minute range. setting minimum tempo to 140 restricts results to only those tracks with a tempo of greater than 140 bpm.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 677,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 659,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: classes.track_attribute_card_1,\n                    style: {\n                      backgroundColor: \"#462255\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_title_2,\n                        children: \"valence\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 694,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                        variant: \"square\",\n                        src: valence,\n                        className: classes.track_attribute_image\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 699,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.track_attribute_font_type_2,\n                          children: \"type: mood\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 705,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 704,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.track_attribute_font_content_2,\n                        children: \"valence will control how happy a song sounds! tracks with higher valence sounds more happy & positive. tracks with lower valence sounds more negative (sad, angry, etc.)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 711,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 693,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 689,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 688,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(RecBoards, {\n                onChange: set_rec_values\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 723,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.step_root,\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.step_header,\n                children: \"Step 3: Get Your Results\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  margin: \"auto\",\n                  justify: \"center\",\n                  backgroundColor: \"#1DB954\",\n                  color: \"white\"\n                },\n                variant: \"contained\",\n                onClick: get_recommendations,\n                children: \"Get Recommendations!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 735,\n                columnNumber: 17\n              }, this), results && /*#__PURE__*/_jsxDEV(RecommendationResults, {\n                results: results\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 29\n              }, this), results && /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  margin: \"auto\",\n                  justify: \"center\",\n                  backgroundColor: \"#1DB954\",\n                  color: \"white\"\n                },\n                variant: \"contained\" // onClick={({ create_playlist }, { export_to_playlist })}\n                ,\n                onClick: create_playlist // onClick={() => {\n                // handle_create_and_export();\n                // }}\n                ,\n                children: \"Create Playlist\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 749,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  margin: \"auto\",\n                  justify: \"center\",\n                  backgroundColor: \"#1DB954\",\n                  color: \"white\"\n                },\n                variant: \"contained\" // onClick={function (event) {\n                //   create_playlist();\n                //   export_to_playlist();\n                // }}\n                ,\n                onClick: export_to_playlist,\n                children: \"Export to Playlist\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Explorify, \"7c9oHKh5OM+FjLmHfd7KMj7IQck=\", false, function () {\n  return [useStyles];\n});\n\n_c = Explorify;\nexport default Explorify;\n\nvar _c;\n\n$RefreshReg$(_c, \"Explorify\");","map":{"version":3,"sources":["/Users/xinwng/Projects/Explorify/client/src/explorify.js"],"names":["React","useState","makeStyles","Box","Card","CardContent","Grid","Typography","Button","ThemeProvider","createMuiTheme","CssBaseline","Avatar","axios","SearchBar","RecBoards","RecommendationResults","GetUserData","acousticness","danceability","instrumental","loudness2","popularity","tempo","valence","liveness","speechiness","energy","theme","typography","fontFamily","palette","background","default","props","MuiButtonBase","disableRipple","allVariants","color","overrides","MuiSlider","root","height","padding","width","switchBase","colorSecondary","thumb","border","boxShadow","opacity","track","borderRadius","rail","valueLabel","left","useStyles","gridContainer","spacing","alignItems","direction","gridItem","backgroundColor","nav_title","display","flexDirection","placeItems","fontSize","step_root","maxWidth","marginBottom","step_header","textAlign","fontWeight","step_desc","card","card_content","track_attribute_card_1","track_attribute_font_title","track_attribute_font_title_2","track_attribute_font_type","track_attribute_font_type_2","track_attribute_font_content","marginTop","paddingLeft","paddingRight","track_attribute_font_content_2","track_attribute_image","margin","Explorify","auth","classes","token","user_id","set_user_id","rec_values","set_rec_values","results","set_results","results_data","set_results_data","result_uri","set_result_uri","selected_seeds","set_selected_seeds","playlist_id","set_playlist_id","console","log","get_recommendations","url","seed_string","join","min","max","Object","keys","forEach","rec","enabled","push","value","min_string","max_string","data","get","headers","Authorization","create_playlist","playlist_name","post","JSON","stringify","name","then","id","export_to_playlist","uri","tracks","map","r","euri","encodeURIComponent","handle_create_and_export","setTimeout","paddingBottom","justify"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  ThemeProvider,\n  createMuiTheme,\n  CssBaseline,\n  Avatar,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\n\nimport SearchBar from \"./component/search_bar\";\nimport RecBoards from \"./component/rec_boards\";\nimport RecommendationResults from \"./component/rec_results\";\nimport GetUserData from \"./component/get_user_data\";\n// import ExportToPlaylist from \"./component/export_to_playlist\";\n// const querystring = require(\"querystring\");\nimport acousticness from \"./icon/acousticness.png\";\nimport danceability from \"./icon/danceability.png\";\nimport instrumental from \"./icon/instrumental.png\";\nimport loudness2 from \"./icon/loudness2.png\";\nimport popularity from \"./icon/popularity.png\";\nimport tempo from \"./icon/tempo.png\";\nimport valence from \"./icon/valence.png\";\nimport liveness from \"./icon/liveness.png\";\nimport speechiness from \"./icon/speechiness.png\";\nimport energy from \"./icon/energy.png\";\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Inter\", \"Kiwi Maru\"],\n  },\n  palette: {\n    background: {\n      default: \"#6b705c\",\n    },\n  },\n  props: {\n    MuiButtonBase: {\n      disableRipple: true,\n    },\n  },\n  typography: { allVariants: { color: \"white\" } },\n  overrides: {\n    MuiSlider: {\n      root: {\n        // color: \"#3880ff\",\n        height: 5,\n        padding: \"15px 0\",\n        width: \"95%\",\n        // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n      },\n      switchBase: {\n        // Controls default (unchecked) color for the thumb\n        // color: \"#ccc\",\n      },\n      colorSecondary: {\n        \"&$checked\": {\n          // Controls checked color for the thumb\n          color: \"#f2ff00\",\n        },\n      },\n      thumb: {\n        height: 13,\n        width: 13,\n        // size: 50,\n        // marginTop: -8,\n        // marginLeft: -12,\n        // color: \"#2B2D25\",\n        border: \"5px solid currentColor\",\n        \"&:focus, &:hover, &$active\": {\n          boxShadow: \"inherit\",\n        },\n        \"&$disabled\": {\n          opacity: 0.8,\n          // color: \"#e6e4df\",\n        },\n      },\n      track: {\n        // color: \"#2B2D25\",\n        height: 5,\n        borderRadius: 4,\n        // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n      },\n      rail: {\n        color: \"#FFE8D6\",\n        height: 5,\n        borderRadius: 4,\n        // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n      },\n      valueLabel: { left: \"calc(-50% - 12px)\", color: \"#2B2D25\" },\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    padding: 10,\n    spacing: 10,\n    alignItems: \"center\",\n    direction: \"row\",\n  },\n  gridItem: {\n    backgroundColor: \"#FFB4A2\",\n    background: \"#000\",\n    color: \"#000\",\n  },\n  nav_title: {\n    padding: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    placeItems: \"left\",\n    fontSize: \"1.5rem\",\n    fontFamily: \"Kiwi Maru\",\n  },\n  step_root: {\n    // align: \"center\",\n    padding: 10,\n    maxWidth: 1000,\n    marginBottom: 50,\n    backgroundColor: \"#ddbea9\",\n    borderRadius: 10,\n  },\n  step_header: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.55em\",\n    marginBottom: 10,\n    fontWeight: \"600\",\n  },\n  step_desc: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.1em\",\n    marginBottom: 20,\n  },\n  card: {\n    // backgroundColor: \"FFB4A2\",\n  },\n  card_content: {\n    // backgroundColor: \"#FFB4A2\",\n  },\n\n  track_attribute_card_1: {\n    width: \"275px\",\n    height: \"400px\",\n    marginBottom: 30,\n    borderRadius: 10,\n  },\n\n  track_attribute_font_title: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\",\n  },\n  track_attribute_font_title_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\",\n  },\n  track_attribute_font_type: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_type_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_content: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#18181F\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.2em\",\n    textAlign: \"justify\",\n  },\n  track_attribute_font_content_2: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#e6e4df\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.13em\",\n    textAlign: \"justify\",\n    // lineSpacing: \"10\",\n  },\n  track_attribute_image: {\n    margin: 10,\n    width: theme.spacing(9),\n    height: theme.spacing(9),\n  },\n}));\n\nconst Explorify = ({ auth }) => {\n  const classes = useStyles();\n  const { token } = auth;\n\n  const [user_id, set_user_id] = useState(\"\");\n  const [rec_values, set_rec_values] = useState([]);\n  const [results, set_results] = useState(null);\n  const [results_data, set_results_data] = useState([]);\n  const [result_uri, set_result_uri] = useState(\"\");\n  const [selected_seeds, set_selected_seeds] = useState([]);\n  const [playlist_id, set_playlist_id] = useState(\"\");\n\n  console.log(\"rv\", rec_values);\n  console.log(\"user_id\", user_id);\n  console.log(\"results\");\n\n  const get_recommendations = async () => {\n    const url = \"https://api.spotify.com/v1/recommendations\";\n    let seed_string;\n    if (seed_string < 0) {\n      return;\n    } else {\n      seed_string = `seed_tracks=${selected_seeds.join(\",\")}`;\n    }\n    let min = [];\n    let max = [];\n    Object.keys(rec_values).forEach((rec) => {\n      if (rec_values[rec].enabled) {\n        min.push(`min_${rec}=${rec_values[rec].value[0]}`);\n        max.push(`min_${rec}=${rec_values[rec].value[1]}`);\n      }\n    });\n\n    const min_string = min.join(\"&\");\n    const max_string = max.join(\"&\");\n\n    const { data } = await axios.get(\n      `${url}?${seed_string}&${min_string}&${max_string}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    set_results(data);\n    console.log(\"data\", data, results);\n    // const uri = results.tracks.map((r) => \"spotify:track:\" + r.id);\n    // console.log(uri);\n  };\n\n  const create_playlist = async () => {\n    const url = \"https://api.spotify.com/v1/users/\";\n    const playlist_name = \"brought to you by explorify\";\n    // const playlist_desc = \"generated at \";\n    return await axios\n      .post(\n        `${url}${user_id}/playlists`,\n        JSON.stringify({\n          name: playlist_name,\n          // epd,\n        }),\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((data) => set_playlist_id(data.data.id));\n    // set_playlist_id(data.id);\n    // return export_to_playlist();\n\n    /* Add songs to playlist */\n  };\n\n  // const export_to_playlist = async () => {\n  async function export_to_playlist() {\n    // const playlist_id = await set_playlist_id;\n    console.log(playlist_id);\n    const url = \"https://api.spotify.com/v1/playlists/\";\n    const uri = results.tracks.map((r) => \"spotify:track:\" + r.id);\n    const euri = encodeURIComponent(uri);\n    console.log(uri);\n    return await axios\n      .post(`${url}${playlist_id}/tracks?uris=${euri}`, null, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((data) => console.log(\"success\", data));\n    // if (data) {\n    //   console.log(\"success\", data);\n    // }\n  }\n\n  function handle_create_and_export() {\n    create_playlist();\n    setTimeout(function () {\n      export_to_playlist();\n    }, 15000);\n    console.log(\"pid\", playlist_id);\n    // export_to_playlist();\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid container className={classes.gridContainer}>\n        <Grid item xs={12} className=\"classes.gridItem\">\n          {/* <Typography className={classes.nav_title}>explorify</Typography> */}\n        </Grid>\n        <Grid item xs={12}>\n          <GetUserData auth={auth} onChange={set_user_id}></GetUserData>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box className={classes.card}>\n            <Card className={classes.step_root}>\n              <CardContent className={classes.card_content}>\n                <Typography className={classes.step_header}>\n                  Step 1: Input Your Seeds\n                </Typography>\n                <Typography className={classes.step_desc}>\n                  Include up to 5 \"seeds\", these seeds will serve as reference\n                  tracks for the basis of your new set of recommended songs.{\" \"}\n                  <br></br>Go ahead and search for some songs! When you are\n                  done, scroll down to the next step.\n                </Typography>\n                <SearchBar\n                  auth={auth}\n                  onChange={set_selected_seeds}\n                ></SearchBar>\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box>\n            <Card className={classes.step_root}>\n              <CardContent>\n                <Typography className={classes.step_header}>\n                  Step 2: Fine Tune Your Track Attributes\n                </Typography>\n                <Typography\n                  className={classes.step_desc}\n                  style={{ paddingBottom: 15 }}\n                >\n                  In this step, you have the ability to fine tune specific track\n                  attributes that you want to look for in your recommended\n                  songs. <br></br> First learn about the attributes. Then,\n                  scroll down and select the track attributes you want to\n                  modify. <br></br>Lastly, drag the min or max sliders to really\n                  specify your desired range!\n                </Typography>\n                <Grid\n                  container\n                  direction=\"row\"\n                  spacing={2}\n                  style={\n                    {\n                      // paddingLeft: 45,\n                    }\n                  }\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#BDBAD5\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title}\n                        >\n                          acousticness\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={acousticness}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type}\n                          >\n                            type: context\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content}\n                        >\n                          tracks with <i>higher</i> acousticness indicate tracks\n                          with <i>more</i> featurings of guitars, pianos,\n                          drumsets, etc. whereas, <i>lower</i> acousticness\n                          indicate tracks with\n                          <i> more</i> featurings of electronic or synthesized\n                          elements.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#124E78\", color: \"#fff\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title_2}\n                        >\n                          danceability\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={danceability}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type_2}\n                          >\n                            type: mood\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content_2}\n                        >\n                          an overall measurement of a track's suitability for\n                          dancing based on musical elements including tempo,\n                          rhythm, beat strength, and more.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#F49D6E\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title}\n                        >\n                          energy\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={energy}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type}\n                          >\n                            type: mood\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content}\n                        >\n                          an overall measurement of a track's intensity &\n                          activity. <i>higher</i> energy will restrict results\n                          to fast, loud, and noisy songs. psst: heavy metal =\n                          higher energy & mozart = lower energy\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#F2CD5D\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title}\n                        >\n                          instrumentalness\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={instrumental}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type}\n                          >\n                            type: properties\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content}\n                        >\n                          predicts whether a track contains vocals. rap songs\n                          are more vocal, whereas lofi study music are less\n                          vocal. the higher the value, the more likely the track\n                          contains NO vocal content.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#C0D6DF\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title}\n                        >\n                          liveness\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={liveness}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type}\n                          >\n                            type: context\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content}\n                        >\n                          liveness detects the presence of an audience in the\n                          recording. <i>higher</i> liveness will lead you to\n                          more tracks that was probably performed live. increase\n                          this value if you want to find tracks that are\n                          straight from an artist's concert.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#FFA69E\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title}\n                        >\n                          loudness\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={loudness2}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type}\n                          >\n                            type: properties\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content}\n                        >\n                          loudness\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#BB342F\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title_2}\n                        >\n                          popularity\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={popularity}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type_2}\n                          >\n                            type: other\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content_2}\n                        >\n                          popularity provides a measure of - well - how popular\n                          you want the tracks in your results to be. set it{\" \"}\n                          <i>lower</i> if you want to discover more low-key\n                          songs, and set it <i>higher</i> if you want to\n                          continue jamming out to tracks just as popular as\n                          Despacito or Gangnam Style.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#758E4F\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title_2}\n                        >\n                          speechiness\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={speechiness}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type_2}\n                          >\n                            type: properties\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content_2}\n                        >\n                          kind of similar to instrumental, but inverse. setting\n                          speechiness to a <i>higher</i> value will lead you to\n                          songs that have a <i>higher</i> amount of spoken\n                          words. psst: setting this high will get you songs like\n                          Rap God by Eminem.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#AA4465\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title_2}\n                        >\n                          tempo\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={tempo}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type_2}\n                          >\n                            type: mood\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content_2}\n                        >\n                          tempo means beats per minute! setting a tempo range =\n                          beats per minute range. setting minimum tempo to 140\n                          restricts results to only those tracks with a tempo of\n                          greater than 140 bpm.\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                  <Grid item>\n                    <Card\n                      className={classes.track_attribute_card_1}\n                      style={{ backgroundColor: \"#462255\" }}\n                    >\n                      <CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_title_2}\n                        >\n                          valence\n                        </Typography>\n                        <Avatar\n                          variant=\"square\"\n                          src={valence}\n                          className={classes.track_attribute_image}\n                        ></Avatar>\n                        <CardContent>\n                          <Typography\n                            className={classes.track_attribute_font_type_2}\n                          >\n                            type: mood\n                          </Typography>\n                        </CardContent>\n                        <Typography\n                          className={classes.track_attribute_font_content_2}\n                        >\n                          valence will control how happy a song sounds! tracks\n                          with higher valence sounds more happy & positive.\n                          tracks with lower valence sounds more negative (sad,\n                          angry, etc.)\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                </Grid>\n                <RecBoards onChange={set_rec_values} />\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box>\n            <Card className={classes.step_root}>\n              <CardContent>\n                <Typography className={classes.step_header}>\n                  Step 3: Get Your Results\n                </Typography>\n                <Button\n                  style={{\n                    margin: \"auto\",\n                    justify: \"center\",\n                    backgroundColor: \"#1DB954\",\n                    color: \"white\",\n                  }}\n                  variant={\"contained\"}\n                  onClick={get_recommendations}\n                >\n                  Get Recommendations!\n                </Button>\n                {results && <RecommendationResults results={results} />}\n                {results && (\n                  <Button\n                    style={{\n                      margin: \"auto\",\n                      justify: \"center\",\n                      backgroundColor: \"#1DB954\",\n                      color: \"white\",\n                    }}\n                    variant={\"contained\"}\n                    // onClick={({ create_playlist }, { export_to_playlist })}\n                    onClick={create_playlist}\n                    // onClick={() => {\n                    // handle_create_and_export();\n                    // }}\n                  >\n                    Create Playlist\n                  </Button>\n                )}\n                <Button\n                  style={{\n                    margin: \"auto\",\n                    justify: \"center\",\n                    backgroundColor: \"#1DB954\",\n                    color: \"white\",\n                  }}\n                  variant={\"contained\"}\n                  // onClick={function (event) {\n                  //   create_playlist();\n                  //   export_to_playlist();\n                  // }}\n                  onClick={export_to_playlist}\n                >\n                  Export to Playlist\n                </Button>\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default Explorify;\n"]},"metadata":{},"sourceType":"module"}