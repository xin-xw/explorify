{"ast":null,"code":"var _jsxFileName = \"/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Grid, TextField, Button } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport SearchResults from \"./search_results\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar({\n  auth\n}) {\n  _s();\n\n  const {\n    token\n  } = auth;\n  const [search_result, set_search_result] = useState([]);\n  const [search_string, set_search_string] = useState(\"\");\n  const [selected_artists, set_selected_artists] = useState([]);\n\n  async function spotify_search_artists() {\n    const url = \"https://api.spotify.com/v1/search\";\n    const search_query = encodeURIComponent(search_string);\n    console.log(\"search_query\", search_query);\n    const search_type_query = \"type=artist\";\n    console.log(\"token\", token);\n    const {\n      data\n    } = await axios.get(`${url}?q=${search_query}&${search_type_query}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(data);\n\n    if (data && data.artists) {\n      set_search_result(data.artists.items);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    style: {\n      padding: 0\n    },\n    spacing: 0,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        class: \"mw5 mw7-ns center bg-light-gray pa3 ph5-ns\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          label: \"Search Artists\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          fullWidth: true,\n          onChange: event => set_search_string(event.target.value),\n          value: search_string\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: \"#1DB954\"\n          },\n          onClick: spotify_search_artists,\n          children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(SearchResults, {\n        results: search_result,\n        onChange: set_selected_artists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: selected_artists.map((artist, index) => /*#__PURE__*/_jsxDEV(Typography, {\n        children: [index + 1, \". \", artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchBar, \"nEKEK7Ph8Cqo5acbSSfy0nLqVwM=\");\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js"],"names":["React","useState","axios","Grid","TextField","Button","Search","SearchResults","SearchBar","auth","token","search_result","set_search_result","search_string","set_search_string","selected_artists","set_selected_artists","spotify_search_artists","url","search_query","encodeURIComponent","console","log","search_type_query","data","get","headers","Authorization","artists","items","padding","display","flexDirection","backgroundColor","event","target","value","map","artist","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Grid, TextField, Button } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\n\nimport SearchResults from \"./search_results\";\n\nexport default function SearchBar({ auth }) {\n  const { token } = auth;\n  const [search_result, set_search_result] = useState([]);\n  const [search_string, set_search_string] = useState(\"\");\n  const [selected_artists, set_selected_artists] = useState([]);\n\n  async function spotify_search_artists() {\n    const url = \"https://api.spotify.com/v1/search\";\n    const search_query = encodeURIComponent(search_string);\n    console.log(\"search_query\", search_query);\n    const search_type_query = \"type=artist\";\n    console.log(\"token\", token);\n    const { data } = await axios.get(\n      `${url}?q=${search_query}&${search_type_query}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(data);\n    if (data && data.artists) {\n      set_search_result(data.artists.items);\n    }\n  }\n\n  return (\n    <Grid container style={{ padding: 0 }} spacing={0}>\n      <Grid item xs={12} style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <section class=\"mw5 mw7-ns center bg-light-gray pa3 ph5-ns\">\n          <TextField\n            variant={\"outlined\"}\n            label={\"Search Artists\"}\n            style={{ backgroundColor: \"white\" }}\n            fullWidth\n            onChange={(event) => set_search_string(event.target.value)}\n            value={search_string}\n          ></TextField>\n          <Button\n            style={{ backgroundColor: \"#1DB954\" }}\n            onClick={spotify_search_artists}\n          >\n            <Search />\n          </Button>\n        </section>\n      </Grid>\n      <Grid item xs={12}>\n        <SearchResults\n          results={search_result}\n          onChange={set_selected_artists}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        {selected_artists.map((artist, index) => (\n          <Typography>\n            {index + 1}. {artist}\n          </Typography>\n        ))}\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}