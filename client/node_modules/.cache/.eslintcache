[{"/Users/xinwng/Projects/Explorify/client/src/index.js":"1","/Users/xinwng/Projects/Explorify/client/src/App.js":"2","/Users/xinwng/Projects/Explorify/client/src/explorify.js":"3","/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js":"4","/Users/xinwng/Projects/Explorify/client/src/component/search_results.js":"5","/Users/xinwng/Projects/Explorify/client/src/component/rec_boards.js":"6","/Users/xinwng/Projects/Explorify/client/src/component/get_recommendations.js":"7","/Users/xinwng/Projects/Explorify/client/src/component/rec_results.js":"8","/Users/xinwng/Projects/Explorify/client/src/component/get_user_data.js":"9","/Users/xinwng/Projects/Explorify/client/src/pre_pages/login_page.js":"10","/Users/xinwng/Projects/Explorify/client/src/pre_pages/loading.js":"11","/Users/xinwng/Projects/Explorify/client/src/component/export_to_playlist.js":"12","/Users/xinwng/Projects/Explorify/client/src/component/book_track_attribute.js":"13"},{"size":219,"mtime":1624150925466,"results":"14","hashOfConfig":"15"},{"size":1198,"mtime":1624161785734,"results":"16","hashOfConfig":"15"},{"size":15118,"mtime":1624713524366,"results":"17","hashOfConfig":"15"},{"size":4132,"mtime":1624708450047,"results":"18","hashOfConfig":"15"},{"size":4778,"mtime":1624708635083,"results":"19","hashOfConfig":"15"},{"size":13204,"mtime":1624712609016,"results":"20","hashOfConfig":"15"},{"size":1278,"mtime":1624092836672,"results":"21","hashOfConfig":"15"},{"size":2795,"mtime":1624711102753,"results":"22","hashOfConfig":"15"},{"size":2761,"mtime":1624712747439,"results":"23","hashOfConfig":"15"},{"size":4317,"mtime":1624177598541,"results":"24","hashOfConfig":"15"},{"size":2523,"mtime":1624165425236,"results":"25","hashOfConfig":"15"},{"size":882,"mtime":1624182761432,"results":"26","hashOfConfig":"15"},{"size":14678,"mtime":1624697643244,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1fe4i75",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"/Users/xinwng/Projects/Explorify/client/src/index.js",[],["63","64"],"/Users/xinwng/Projects/Explorify/client/src/App.js",[],"/Users/xinwng/Projects/Explorify/client/src/explorify.js",["65","66","67"],"/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js",["68","69","70"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  makeStyles,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  Box,\n} from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport SearchResults from \"./search_results\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"5px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  search_bar: {\n    display: \"flex\",\n    \"flex-direction\": \"row\",\n    maxWidth: 500,\n    justify: \"center\",\n    padding: 7,\n    margin: \"auto\",\n    backgroundColor: \"#ffe8d6\",\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n    borderRadius: 10,\n    // minHeight: 150,\n    marginBottom: 30,\n  },\n  search_result: {\n    // paddingTop: -10,\n    // marginTop: -20,\n    color: \"#000\",\n  },\n  selected_seeds: {\n    // paddingTop: 10,\n    // marginTop: 20,\n    maxWidth: 400,\n  },\n  selected_seeds_header: {\n    fontSize: 18,\n    marginTop: -5,\n    fontWeight: \"600\",\n    marginLeft: 13,\n    textAlign: \"left\",\n    // paddingTop: 3,\n    // marginTop: 20,\n    // maxWidth: 350,\n  },\n  selected_seeds_songs: {\n    fontSize: 14,\n    lineHeight: 2,\n    marginLeft: 20,\n    textAlign: \"left\",\n    // fontWeight: \"600\",\n    // paddingTop: 3,\n    // marginTop: 20,\n    // maxWidth: 350,\n  },\n});\n\nexport default function SearchBar({ auth, onChange }) {\n  const classes = useStyles();\n  const { token } = auth;\n\n  const [search_result, set_search_result] = useState([]);\n  const [search_string, set_search_string] = useState(\"\");\n  const [seleceted_seeds, set_selected_seeds] = useState([]);\n\n  async function spotify_search_songs() {\n    const url = \"https://api.spotify.com/v1/search\";\n    const search_query = encodeURIComponent(search_string);\n    // console.log(\"search_query\", search_query);\n    const search_type_query = \"type=track\";\n    // console.log(\"token\", token);\n    const { data } = await axios.get(\n      `${url}?q=${search_query}&${search_type_query}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(data);\n    if (data && data.tracks) {\n      set_search_result(data.tracks.items);\n    }\n  }\n\n  useEffect(() => {\n    onChange(seleceted_seeds);\n  }, [onChange, seleceted_seeds]);\n\n  // console.log(\"search_result\", search_result);\n\n  return (\n    <Grid\n      container\n      // style={{ \"align-items\": \"flex-end\" }}\n      spacing={0}\n      justify=\"center\"\n    >\n      <Grid item xs={12}>\n        <Box className={classes.search_bar}>\n          <TextField\n            id={\"outlined-basic\"}\n            variant={\"outlined\"}\n            placeholder=\"enter reference tracks...\"\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={(e) => set_search_string(e.target.value)}\n            onKeyDown={(e) => {\n              console.log(e.key);\n              if (e.key === \"Enter\") {\n                spotify_search_songs();\n              }\n            }}\n            value={search_string}\n          ></TextField>\n          <Button\n            style={{\n              marginLeft: 5,\n              backgroundColor: \"#B7B7A4\",\n              color: \"#2b2d42\",\n            }}\n            onClick={spotify_search_songs}\n            variant=\"contained\"\n          >\n            <MusicNoteIcon style={{ fontSize: 35 }} />\n          </Button>\n        </Box>\n      </Grid>\n      {/* <Grid item xs={12} sm={6}> */}\n      <Box className={classes.search_results}>\n        <SearchResults results={search_result} onChange={set_selected_seeds} />\n      </Box>\n      {/* </Grid> */}\n      {/* <Grid item xs={12} sm={6}> */}\n      {/* <Typography className={classes.selected_seeds_header}>\n          Your selected seeds will appear here\n        </Typography> */}\n      {/* <Paper className={classes.selected_seeds}>\n          {seleceted_seeds.map((songs, index) => (\n            <Typography className={classes.selected_seeds_songs}>\n              {index + 1}. {songs}\n            </Typography>\n          ))}\n        </Paper>\n      </Grid> */}\n    </Grid>\n  );\n}\n","/Users/xinwng/Projects/Explorify/client/src/component/search_results.js",["71"],"import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  ListItem,\n  List,\n  ListItemIcon,\n  ListItemText,\n  Checkbox,\n  makeStyles,\n  Typography,\n  Avatar,\n  Grid,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  checkboxes_root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  checkboxes_icon: {\n    borderRadius: 3,\n    width: 18,\n    height: 18,\n    boxShadow:\n      \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\n    backgroundColor: \"#f5f8fa\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\n    \"$root.Mui-focusVisible &\": {\n      outline: \"2px auto rgba(19,124,189,.6)\",\n      outlineOffset: 2,\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#ebf1f5\",\n    },\n    \"input:disabled ~ &\": {\n      boxShadow: \"none\",\n      background: \"rgba(206,217,224,.5)\",\n    },\n  },\n  checked_icon: {\n    backgroundColor: \"#137cbd\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\n    \"&:before\": {\n      display: \"block\",\n      width: 18,\n      height: 18,\n      backgroundImage:\n        \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\n        \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\n        \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\n      content: '\"\"',\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#106ba3\",\n    },\n  },\n  grid_container: {\n    direction: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  search_results: {\n    // paddingTop: 15,\n    // paddingLeft: 20,\n    // marginTop: 15,\n    // width: 500,\n    backgroundColor: \"#ffe8d6\",\n    borderRadius: 10,\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n  },\n  cover_art: {\n    marginLeft: -25,\n    marginRight: 10,\n    // width: theme.spacing(5.5),\n    width: theme.spacing(5.8),\n    // height: theme.spacing(5.5),\n    height: theme.spacing(5.8),\n  },\n  track_name: {\n    fontSize: 15,\n    fontWeight: 500,\n    // fontSize: 13.5,\n    color: \"#000\",\n  },\n  artist_name: {\n    fontSize: 13,\n    // fontSize: 11,\n    color: \"#000\",\n  },\n}));\n\nexport default function SearchResults({ results, onChange }) {\n  const classes = useStyles();\n  const [checked, set_checked] = useState([]);\n  const [seeds, set_seeds] = useState([]);\n  console.log(checked);\n\n  const handle_toggle = (value, name) => () => {\n    const cur_index = checked.indexOf(value);\n    const new_checked = [...checked];\n    const new_seed = [...seeds];\n    if (cur_index === -1) {\n      if (checked.length < 5) {\n        new_checked.push(value);\n        new_seed.push(name);\n      }\n    } else {\n      new_checked.splice(cur_index, 1);\n      new_seed.splice(cur_index, 1);\n    }\n    set_checked(new_checked);\n    set_seeds(new_seed);\n    console.log(\"seeds\", seeds);\n    onChange(new_checked);\n    // onChange(new_seed);\n  };\n\n  return (\n    <Grid container className={classes.grid_container}>\n      <Grid item xs={12} className={classes.search_results}>\n        <List>\n          {results.slice(0, 10).map((item, index) => (\n            <ListItem\n              key={item.id}\n              button\n              onClick={handle_toggle(item.id, item.name)}\n              // margin={-4}\n              style={{ width: 500 }}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  className={classes.checkboxes_root}\n                  checkedIcon={\n                    <span\n                      className={clsx(\n                        classes.checkboxes_icon,\n                        classes.checked_icon\n                      )}\n                    />\n                  }\n                  icon={<span className={classes.checkboxes_icon} />}\n                  inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n                  disableRipple={true}\n                  edge={\"start\"}\n                  checked={checked.indexOf(item.id) !== -1}\n                  tabIndex={-1}\n                />\n              </ListItemIcon>\n              <Avatar\n                src={item.album.images[2].url}\n                variant=\"square\"\n                className={classes.cover_art}\n              ></Avatar>\n\n              <ListItemText>\n                <Typography className={classes.track_name}>\n                  {item.name}\n                </Typography>\n                <Typography className={classes.artist_name}>\n                  {item.artists[0].name}\n                </Typography>\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n      </Grid>\n    </Grid>\n  );\n}\n","/Users/xinwng/Projects/Explorify/client/src/component/rec_boards.js",["72","73"],"/Users/xinwng/Projects/Explorify/client/src/component/get_recommendations.js",[],["74","75"],"/Users/xinwng/Projects/Explorify/client/src/component/rec_results.js",["76","77","78","79","80","81","82"],"/Users/xinwng/Projects/Explorify/client/src/component/get_user_data.js",["83","84"],"/Users/xinwng/Projects/Explorify/client/src/pre_pages/login_page.js",["85","86"],"import React from \"react\";\nimport {\n  Grid,\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n  CardActionArea,\n  makeStyles,\n  Button,\n  styled,\n  Typography,\n  ThemeProvider,\n  createMuiTheme,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginTop: 20,\n    fontSize: \"4.5em\",\n    fontFamily: \"Kiwi Maru\",\n    fontWeight: 500,\n    // color: \"#9EB56F\",\n  },\n  desc_root: {\n    maxWidth: 500,\n    margin: \"auto\",\n    borderRadius: 5,\n    position: \"relative\",\n    boxShadow: \"0 3px 5px 2px rgba(0, 0, 0, .1)\",\n  },\n  desc_content: { padding: 20 },\n  desc_cta: {\n    display: \"block\",\n    textAlign: \"justify\",\n    color: \"black\",\n    fontSize: 15,\n    fontFamily: \"Inter\",\n  },\n  desc_title: {\n    color: \"black\",\n    // letterSpacing: \"1x\",\n    fontSize: 30,\n    textAlign: \"left\",\n    marginTop: 0,\n    fontFamily: \"Inter\",\n    fontWeight: 500,\n  },\n}));\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Kanit\", \"Inter\", \"Kiwi Maru\"],\n  },\n  palette: {\n    background: {\n      default: \"#E2E2E2\",\n    },\n  },\n});\n\nconst LoginButton = styled(Button)({\n  background:\n    \"linear-gradient(to right, #b2c9d4, #b8c4da, #c8bdd7, #d9b6ca, #e3b2b4)\",\n  border: 0,\n  borderRadius: 10,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  // boxShadow: \"5px 5px 15px 5px rgba(214,223,193,.5)\",\n  color: \"black\",\n  fontSize: 20,\n  fontWeight: 400,\n  height: 45,\n  padding: \"0 30px\",\n});\n\nfunction LoginPage() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={5}\n        >\n          <Grid item>\n            <Typography className={classes.title}>explorify</Typography>\n          </Grid>\n          <Grid item>\n            <Card className={classes.desc_root}>\n              <CardContent className={classes.desc_content}>\n                <Typography className={classes.desc_title} variant=\"h5\">\n                  What is this?\n                </Typography>\n                <Box\n                  display={\"flex\"}\n                  flexDirection={\"column\"}\n                  alignItems={\"center\"}\n                  justifyContent={\"center\"}\n                  minHeight={250}\n                  color={\"black\"}\n                  textAlign={\"center\"}\n                  elevation={3}\n                >\n                  <Typography className={classes.desc_cta}>\n                    Spotify provides developers a Recommendation API that can be\n                    found{\" \"}\n                    <a\n                      href=\"https://developer.spotify.com/console/get-recommendations/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      here\n                    </a>\n                    , disguised away from the public audience. Essentially,\n                    Explorify aims to unleash the potential of their API.\n                    Provided your favorite songs, Explorify aims to recommend\n                    you other similar tracks (if there is sufficient\n                    information). But, the cool thing is their API also allows\n                    you to customize your final matches with specific track\n                    attributes such as: danceability, energy, popularity, tempo,\n                    and more. Give it a try!\n                  </Typography>\n                </Box>\n                <Typography className={classes.desc_cta}>\n                  Check me out at:{\" \"}\n                  <a\n                    href=\"https://www.xinwang.me\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    https://www.xinwang.me\n                  </a>\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item>\n            <LoginButton href=\"/auth/login\" endIcon={<ExitToAppIcon />}>\n              LOGIN WITH SPOTIFY\n            </LoginButton>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default LoginPage;\n","/Users/xinwng/Projects/Explorify/client/src/pre_pages/loading.js",["87","88","89"],"import React from \"react\";\nimport {\n  Grid,\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n  CardActionArea,\n  makeStyles,\n  Button,\n  styled,\n  Typography,\n  ThemeProvider,\n  createMuiTheme,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginTop: 20,\n    fontSize: \"4.5em\",\n    fontFamily: \"Kiwi Maru\",\n    fontWeight: 500,\n  },\n  desc_root: {\n    maxWidth: 500,\n    margin: \"auto\",\n    borderRadius: 5,\n    position: \"relative\",\n    boxShadow: \"0 3px 5px 2px rgba(0, 0, 0, .1)\",\n  },\n  desc_content: { padding: 20 },\n  desc_cta: {\n    display: \"block\",\n    textAlign: \"justify\",\n    color: \"black\",\n    fontSize: 20,\n  },\n  desc_title: {\n    color: \"black\",\n    letterSpacing: \"1x\",\n    fontSize: 25,\n    textAlign: \"center\",\n    marginTop: 5,\n  },\n}));\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Kanit\", \"Kiwi Maru\"],\n  },\n  palette: {\n    background: {\n      default: \"#E2E2E2\",\n    },\n  },\n});\n\nconst LoginButton = styled(Button)({\n  background:\n    \"linear-gradient(to right, #b2c9d4, #b8c4da, #c8bdd7, #d9b6ca, #e3b2b4)\",\n  border: 0,\n  borderRadius: 10,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  // boxShadow: \"5px 5px 15px 5px rgba(214,223,193,.5)\",\n  color: \"black\",\n  fontSize: 20,\n  fontWeight: 400,\n  height: 45,\n  padding: \"0 30px\",\n});\n\nfunction Loading() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={5}\n        >\n          <Grid item>\n            <Typography className={classes.title}>explorify</Typography>\n          </Grid>\n          <Grid item>\n            <Card className={classes.desc_root}>\n              <CardContent className={classes.desc_content}>\n                <Typography className={classes.desc_title} variant=\"h5\">\n                  Uh oh... Something went wrong!\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item>\n            <LoginButton\n              href=\"/auth/login\"\n              endIcon={<ExitToAppIcon />}\n              disabled\n            >\n              LOGIN WITH SPOTIFY\n            </LoginButton>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default Loading;\n","/Users/xinwng/Projects/Explorify/client/src/component/export_to_playlist.js",["90","91","92","93"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport default function ExportToPlaylist({ auth, user_id }) {\n  const { token } = auth;\n  const [playlist_name, set_playlist_name] = useState(\"\");\n  const [playlist_desc, set_playlist_desc] = useState(\"\");\n\n  useEffect(() => {\n    async function retrieve_data() {\n      const url = \"https://api.spotify.com/v1/users/\";\n      const uid = user_id;\n      console.log(uid);\n      const { data } = await axios.post(`${url}${uid}/playlists`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log(data);\n      if (data) {\n        handle_playlist_config(data);\n      }\n    }\n    retrieve_data();\n  }, [auth, user_id]);\n\n  function handle_playlist_config(data) {\n    set_playlist_name(\"explorify playlist\");\n    set_playlist_desc(\"created by explorify\");\n  }\n}\n",["94","95"],"/Users/xinwng/Projects/Explorify/client/src/component/book_track_attribute.js",["96"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Avatar,\n} from \"@material-ui/core\";\nimport acousticness from \"../icon/acousticness.png\";\nimport danceability from \"../icon/danceability.png\";\nimport instrumental from \"../icon/instrumental.png\";\nimport loudness2 from \"../icon/loudness2.png\";\nimport popularity from \"../icon/popularity.png\";\nimport tempo from \"../icon/tempo.png\";\nimport valence from \"../icon/valence.png\";\nimport liveness from \"../icon/liveness.png\";\nimport speechiness from \"../icon/speechiness.png\";\nimport energy from \"../icon/energy.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    padding: 10,\n    spacing: 10,\n    alignItems: \"center\",\n    direction: \"row\",\n  },\n  gridItem: {\n    backgroundColor: \"#FFB4A2\",\n    background: \"#000\",\n    color: \"#000\",\n  },\n  nav_title: {\n    padding: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    placeItems: \"left\",\n    fontSize: \"1.5rem\",\n    fontFamily: \"Kiwi Maru\",\n  },\n  step_root: {\n    // align: \"center\",\n    padding: 10,\n    maxWidth: 1000,\n    marginBottom: 50,\n    backgroundColor: \"#ddbea9\",\n    borderRadius: 10,\n  },\n  step_header: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.55em\",\n    marginBottom: 10,\n    fontWeight: \"600\",\n  },\n  step_desc: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.1em\",\n    marginBottom: 20,\n  },\n  card: {\n    // backgroundColor: \"FFB4A2\",\n  },\n  card_content: {\n    // backgroundColor: \"#FFB4A2\",\n  },\n\n  track_attribute_card_1: {\n    width: \"275px\",\n    height: \"400px\",\n    marginBottom: 30,\n    borderRadius: 10,\n  },\n\n  track_attribute_font_title: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\",\n  },\n  track_attribute_font_title_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.7em\",\n  },\n  track_attribute_font_type: {\n    color: \"#000\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_type_2: {\n    color: \"#fff\",\n    fontFamily: \"Benne\",\n    fontWeight: 700,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_content: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#18181F\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.2em\",\n    textAlign: \"justify\",\n  },\n  track_attribute_font_content_2: {\n    marginTop: -5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#e6e4df\",\n    fontFamily: \"Benne\",\n    fontWeight: 600,\n    fontSize: \"1.13em\",\n    textAlign: \"justify\",\n    // lineSpacing: \"10\",\n  },\n  track_attribute_image: {\n    margin: 10,\n    width: theme.spacing(9),\n    height: theme.spacing(9),\n  },\n  book: {\n    maxWidth: 925,\n    // height: \"250px\",\n    // marginBottom: 30,\n    borderRadius: 10,\n    backgroundColor: \"#ffe8d6\",\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n  },\n  book_title: {\n    color: \"#2b2d42\",\n    fontFamily: \"Sawarabi Mincho\",\n    paddingTop: 10,\n    paddingBottom: 5,\n    fontWeight: 1000,\n    fontSize: \"2.4em\",\n    textAlign: \"center\",\n  },\n}));\n\nexport default function BookOfTrackAttributes() {\n  const classes = useStyles();\n  return (\n    <Card className={classes.book}>\n      <CardContent>\n        <Typography className={classes.book_title}>\n          Book of Track Attributes 📖\n        </Typography>\n      </CardContent>\n      <Grid\n        container\n        direction=\"row\"\n        spacing={2}\n        style={\n          {\n            // paddingLeft: 45,\n          }\n        }\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#BDBAD5\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                acousticness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={acousticness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: context\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                tracks with <i>higher</i> acousticness indicate tracks with{\" \"}\n                <i>more</i> featurings of guitars, pianos, drumsets, etc.\n                whereas, <i>lower</i> acousticness indicate tracks with\n                <i> more</i> featurings of electronic or synthesized elements.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#124E78\", color: \"#fff\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                danceability\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={danceability}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                an overall measurement of a track's suitability for dancing\n                based on musical elements including tempo, rhythm, beat\n                strength, and more.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#F49D6E\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                energy\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={energy}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                an overall measurement of a track's intensity & activity.{\" \"}\n                <i>higher</i> energy will restrict results to fast, loud, and\n                noisy songs. psst: heavy metal = higher energy & mozart = lower\n                energy\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#F2CD5D\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                instrumentalness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={instrumental}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                predicts whether a track contains vocals. rap songs are more\n                vocal, whereas lofi study music are less vocal. the higher the\n                value, the more likely the track contains NO vocal content.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#C0D6DF\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                liveness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={liveness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: context\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                liveness detects the presence of an audience in the recording.{\" \"}\n                <i>higher</i> liveness will lead you to more tracks that were\n                probably performed live. increase this value if you want to find\n                tracks that are maybe from an artist's concert.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#FFA69E\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                loudness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={loudness2}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                loudness represents an overall measurement of the decibels (dB)\n                throughout a track. setting a <i>higher</i> loudness will lead\n                you to songs that are more fun to blast on the speakers!\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#BB342F\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                popularity\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={popularity}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: other\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                popularity provides a measure of - well - how popular you want\n                the tracks in your results to be. set it <i>lower</i> if you\n                want to discover more low-key songs, and set it <i>higher</i> if\n                you want to continue jamming out to tracks just as popular as\n                Despacito or Gangnam Style.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#758E4F\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                speechiness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={speechiness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                kind of similar to instrumental, but inverse. setting\n                speechiness to a <i>higher</i> value will lead you to songs that\n                have a <i>higher</i> amount of spoken words. psst: setting this\n                high will get you songs like Rap God by Eminem.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#AA4465\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                tempo\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={tempo}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                tempo means beats per minute! setting a tempo range = beats per\n                minute range. setting minimum tempo to 140 restricts results to\n                only those tracks with a tempo of greater than 140 bpm.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#462255\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                valence\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={valence}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                valence will control how happy a song sounds! tracks with higher\n                valence sounds more happy & positive. tracks with lower valence\n                sounds more negative (sad, angry, etc.)\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":33},{"ruleId":"101","severity":1,"message":"105","line":13,"column":3,"nodeType":"103","messageId":"104","endLine":13,"endColumn":9},{"ruleId":"101","severity":1,"message":"106","line":264,"column":12,"nodeType":"103","messageId":"104","endLine":264,"endColumn":36},{"ruleId":"101","severity":1,"message":"107","line":5,"column":3,"nodeType":"103","messageId":"104","endLine":5,"endColumn":8},{"ruleId":"101","severity":1,"message":"108","line":9,"column":3,"nodeType":"103","messageId":"104","endLine":9,"endColumn":13},{"ruleId":"101","severity":1,"message":"109","line":12,"column":10,"nodeType":"103","messageId":"104","endLine":12,"endColumn":16},{"ruleId":"101","severity":1,"message":"110","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"101","severity":1,"message":"111","line":12,"column":3,"nodeType":"103","messageId":"104","endLine":12,"endColumn":6},{"ruleId":"101","severity":1,"message":"112","line":13,"column":3,"nodeType":"103","messageId":"104","endLine":13,"endColumn":9},{"ruleId":"97","replacedBy":"113"},{"ruleId":"99","replacedBy":"114"},{"ruleId":"101","severity":1,"message":"115","line":6,"column":3,"nodeType":"103","messageId":"104","endLine":6,"endColumn":7},{"ruleId":"101","severity":1,"message":"116","line":7,"column":3,"nodeType":"103","messageId":"104","endLine":7,"endColumn":11},{"ruleId":"101","severity":1,"message":"117","line":8,"column":3,"nodeType":"103","messageId":"104","endLine":8,"endColumn":15},{"ruleId":"101","severity":1,"message":"112","line":9,"column":3,"nodeType":"103","messageId":"104","endLine":9,"endColumn":9},{"ruleId":"101","severity":1,"message":"107","line":10,"column":3,"nodeType":"103","messageId":"104","endLine":10,"endColumn":8},{"ruleId":"101","severity":1,"message":"111","line":11,"column":3,"nodeType":"103","messageId":"104","endLine":11,"endColumn":6},{"ruleId":"101","severity":1,"message":"118","line":16,"column":8,"nodeType":"103","messageId":"104","endLine":16,"endColumn":20},{"ruleId":"101","severity":1,"message":"111","line":8,"column":3,"nodeType":"103","messageId":"104","endLine":8,"endColumn":6},{"ruleId":"101","severity":1,"message":"119","line":50,"column":10,"nodeType":"103","messageId":"104","endLine":50,"endColumn":19},{"ruleId":"101","severity":1,"message":"120","line":7,"column":3,"nodeType":"103","messageId":"104","endLine":7,"endColumn":12},{"ruleId":"101","severity":1,"message":"121","line":8,"column":3,"nodeType":"103","messageId":"104","endLine":8,"endColumn":17},{"ruleId":"101","severity":1,"message":"111","line":4,"column":3,"nodeType":"103","messageId":"104","endLine":4,"endColumn":6},{"ruleId":"101","severity":1,"message":"120","line":7,"column":3,"nodeType":"103","messageId":"104","endLine":7,"endColumn":12},{"ruleId":"101","severity":1,"message":"121","line":8,"column":3,"nodeType":"103","messageId":"104","endLine":8,"endColumn":17},{"ruleId":"101","severity":1,"message":"122","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"123","line":6,"column":10,"nodeType":"103","messageId":"104","endLine":6,"endColumn":23},{"ruleId":"101","severity":1,"message":"124","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":23},{"ruleId":"125","severity":1,"message":"126","line":25,"column":6,"nodeType":"127","endLine":25,"endColumn":21,"suggestions":"128"},{"ruleId":"97","replacedBy":"129"},{"ruleId":"99","replacedBy":"130"},{"ruleId":"101","severity":1,"message":"131","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'handle_create_and_export' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'Search' is defined but never used.","'useEffect' is defined but never used.","'Box' is defined but never used.","'Avatar' is defined but never used.",["132"],["133"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ReactFitText' is defined but never used.","'user_data' is assigned a value but never used.","'CardMedia' is defined but never used.","'CardActionArea' is defined but never used.","'React' is defined but never used.","'playlist_name' is assigned a value but never used.","'playlist_desc' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["134"],["132"],["133"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [auth, token, user_id]",{"range":"137","text":"138"},[723,738],"[auth, token, user_id]"]