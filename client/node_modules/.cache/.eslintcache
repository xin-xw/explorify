[{"/Users/xinwng/Projects/Explorify/client/src/index.js":"1","/Users/xinwng/Projects/Explorify/client/src/App.js":"2","/Users/xinwng/Projects/Explorify/client/src/explorify.js":"3","/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js":"4","/Users/xinwng/Projects/Explorify/client/src/component/search_results.js":"5","/Users/xinwng/Projects/Explorify/client/src/component/rec_boards.js":"6","/Users/xinwng/Projects/Explorify/client/src/component/rec_results.js":"7","/Users/xinwng/Projects/Explorify/client/src/component/get_user_data.js":"8","/Users/xinwng/Projects/Explorify/client/src/pre_pages/login_page.js":"9","/Users/xinwng/Projects/Explorify/client/src/pre_pages/loading.js":"10","/Users/xinwng/Projects/Explorify/client/src/component/book_track_attribute.js":"11"},{"size":219,"mtime":1624150925466,"results":"12","hashOfConfig":"13"},{"size":1319,"mtime":1624938523412,"results":"14","hashOfConfig":"13"},{"size":15978,"mtime":1624938523414,"results":"15","hashOfConfig":"13"},{"size":4132,"mtime":1624938523413,"results":"16","hashOfConfig":"13"},{"size":4781,"mtime":1624713730824,"results":"17","hashOfConfig":"13"},{"size":13186,"mtime":1624715626676,"results":"18","hashOfConfig":"13"},{"size":2753,"mtime":1624763807523,"results":"19","hashOfConfig":"13"},{"size":2895,"mtime":1625223224556,"results":"20","hashOfConfig":"13"},{"size":5569,"mtime":1625223242795,"results":"21","hashOfConfig":"13"},{"size":2523,"mtime":1624756232722,"results":"22","hashOfConfig":"13"},{"size":14718,"mtime":1624715337703,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1fe4i75",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"/Users/xinwng/Projects/Explorify/client/src/index.js",[],["54","55"],"/Users/xinwng/Projects/Explorify/client/src/App.js",[],"/Users/xinwng/Projects/Explorify/client/src/explorify.js",["56","57","58","59"],"import React, { useState, useRef } from \"react\";\nimport {\n  makeStyles,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  ThemeProvider,\n  createMuiTheme,\n  CssBaseline,\n  styled,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport SearchBar from \"./component/search_bar\";\nimport RecBoards from \"./component/rec_boards\";\nimport RecommendationResults from \"./component/rec_results\";\nimport GetUserData from \"./component/get_user_data\";\nimport BookOfTrackAttributes from \"./component/book_track_attribute\";\nimport DirectionsRunIcon from \"@material-ui/icons/DirectionsRun\";\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\nimport QueueMusicIcon from \"@material-ui/icons/QueueMusic\";\n\nconst theme = createMuiTheme({\n  typography: {\n    allVariants: {\n      fontFamily: [\"Inter\", \"Kiwi Maru\"],\n      color: \"black\",\n    },\n  },\n  palette: {\n    background: {\n      default: \"#6b705c\",\n    },\n    action: {\n      disabledBackground: \"#EBEBE4\",\n      disabled: \"#000\",\n    },\n  },\n  props: {\n    MuiButtonBase: {\n      disableRipple: true,\n    },\n  },\n  overrides: {\n    MuiSlider: {\n      root: {\n        // color: \"#3880ff\",\n        height: 5,\n        padding: \"15px 0\",\n        width: \"95%\",\n        // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n      },\n      switchBase: {\n        // Controls default (unchecked) color for the thumb\n        // color: \"#ccc\",\n      },\n      colorSecondary: {\n        \"&$checked\": {\n          // Controls checked color for the thumb\n          color: \"#f2ff00\",\n        },\n      },\n      thumb: {\n        height: 13,\n        width: 13,\n        // size: 50,\n        // marginTop: -8,\n        // marginLeft: -12,\n        // color: \"#2B2D25\",\n        border: \"5px solid currentColor\",\n        \"&:focus, &:hover, &$active\": {\n          boxShadow: \"inherit\",\n        },\n        \"&$disabled\": {\n          opacity: 0.5,\n          // color: \"#e6e4df\",\n        },\n      },\n      track: {\n        // color: \"#2B2D25\",\n        height: 5,\n        borderRadius: 4,\n        \"&$disabled\": {\n          opacity: 0.3,\n          color: \"#e6e4df\",\n        },\n      },\n      rail: {\n        color: \"#FFE8D6\",\n        height: 5,\n        borderRadius: 4,\n        // \"&$disabled\": {\n        //   color: \"#e6e4df\",\n        // },\n      },\n      valueLabel: { left: \"calc(-50% - 12px)\", color: \"#2B2D25\" },\n    },\n  },\n});\n\nconst options = {\n  position: \"bottom-right\",\n  style: {\n    backgroundColor: \"#C5C8BC\",\n    // border: \"2px solid lightgreen\",\n    color: \"#000\",\n    fontFamily: \"Inter\",\n    fontSize: \"15px\",\n    textAlign: \"center\",\n  },\n};\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    padding: 10,\n    spacing: 10,\n    alignItems: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n  },\n  gridItem: {\n    paddingTop: 30,\n    marginBottom: -10,\n  },\n  nav_title: {\n    padding: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    placeItems: \"left\",\n    fontSize: \"1.5rem\",\n    fontFamily: \"Kiwi Maru\",\n  },\n  step_root: {\n    // align: \"center\",\n    padding: 10,\n    maxWidth: 1000,\n    marginBottom: 50,\n    backgroundColor: \"#ddbea9\",\n    borderRadius: 10,\n  },\n  step_header: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.7em\",\n    marginBottom: 10,\n    fontWeight: \"700\",\n  },\n  step_desc: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.2em\",\n    marginBottom: 30,\n    lineHeight: 1.5,\n  },\n  card: {\n    // backgroundColor: \"FFB4A2\",\n  },\n  get_rec_button: {\n    // background: \"linear-gradient(to right, #ff9966, #ff5e62)\",\n    background: \"linear-gradient(to right, #d3cce3, #e9e4f0)\",\n    borderRadius: 10,\n    boxShadow: \"0 3px 5px 2px rgba(0, 0, 0, .2)\",\n    height: 50,\n    // padding: \"0 30px\",\n    fontSize: \"1.2em\",\n  },\n  button: {\n    \"&$disabled\": {\n      backgroundColor: \"#EBEBE4\",\n      color: \"#EBEBE4\",\n    },\n  },\n}));\n\nconst Explorify = ({ auth }) => {\n  const classes = useStyles();\n  const { token } = auth;\n\n  const [user_id, set_user_id] = useState(\"\");\n  const [rec_values, set_rec_values] = useState([]);\n  const [results, set_results] = useState(null);\n  const [selected_seeds, set_selected_seeds] = useState([]);\n  const [playlist_id, set_playlist_id] = useState(\"\");\n  const [disabled, setDisabled] = useState(false);\n  const [preventGetYourResults, setPreventGetYourResults] = useState(true);\n  const [openSnackbar, closeSnackbar] = useSnackbar(options);\n\n  console.log(\"rv\", rec_values);\n  console.log(\"user_id\", user_id);\n  console.log(\"results\");\n\n  const get_recommendations = async () => {\n    const url = \"https://api.spotify.com/v1/recommendations\";\n    let seed_string;\n    if (seed_string < 0) {\n      return;\n    } else {\n      seed_string = `seed_tracks=${selected_seeds.join(\",\")}`;\n    }\n    let min = [];\n    let max = [];\n    Object.keys(rec_values).forEach((rec) => {\n      if (rec_values[rec].enabled) {\n        min.push(`min_${rec}=${rec_values[rec].value[0]}`);\n        max.push(`min_${rec}=${rec_values[rec].value[1]}`);\n      }\n    });\n\n    const min_string = min.join(\"&\");\n    const max_string = max.join(\"&\");\n\n    const { data } = await axios.get(\n      `${url}?${seed_string}&${min_string}&${max_string}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    set_results(data);\n    console.log(\"data\", data, results);\n    // const uri = results.tracks.map((r) => \"spotify:track:\" + r.id);\n    // console.log(uri);\n  };\n\n  const create_playlist = async () => {\n    setDisabled(true);\n    setPreventGetYourResults(false);\n    openSnackbar(\"Successfully created playlist on your Spotify\");\n    const url = \"https://api.spotify.com/v1/users/\";\n    const playlist_name = \"brought to you by explorify\";\n    // const playlist_desc = \"generated at \";\n    return await axios\n      .post(\n        `${url}${user_id}/playlists`,\n        JSON.stringify({\n          name: playlist_name,\n          // epd,\n        }),\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((data) => set_playlist_id(data.data.id));\n\n    // set_playlist_id(data.id);\n    // return export_to_playlist();\n\n    /* Add songs to playlist */\n  };\n\n  // const export_to_playlist = async () => {\n  async function export_to_playlist() {\n    // const playlist_id = await set_playlist_id;\n    console.log(playlist_id);\n\n    const url = \"https://api.spotify.com/v1/playlists/\";\n    const uri = results.tracks.map((r) => \"spotify:track:\" + r.id);\n    const euri = encodeURIComponent(uri);\n    console.log(uri);\n    const { data } = await axios\n      .post(`${url}${playlist_id}/tracks?uris=${euri}`, null, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then(openSnackbar(\"Successfully exported results to your Spotify\"));\n\n    // .try(openSnackbar(\"Error, cannot export results to your Spotify\"))\n    // if (data) {\n    //   console.log(\"success\", data);\n    // }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid container className={classes.gridContainer}>\n        <Grid item xs={12} className={classes.gridItem}>\n          <GetUserData auth={auth} onChange={set_user_id}></GetUserData>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box className={classes.card}>\n            <Card className={classes.step_root}>\n              <CardContent className={classes.card_content}>\n                <Typography className={classes.step_header}>\n                  Step 1: Input Your Seeds\n                </Typography>\n                <Typography className={classes.step_desc}>\n                  Include up to <b>5 seeds</b>, these \"seeds\" will serve as\n                  reference tracks for the basis of your new set of recommended\n                  songs. <br></br>Go ahead and search for some songs! When you\n                  are done, scroll down to the next step.\n                </Typography>\n                <SearchBar\n                  auth={auth}\n                  onChange={set_selected_seeds}\n                ></SearchBar>\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box className={classes.card}>\n            <Card className={classes.step_root}>\n              <CardContent className={classes.card_content}>\n                <Typography className={classes.step_header}>\n                  Step 2: Learn About Track Attributes\n                </Typography>\n                <Typography className={classes.step_desc}>\n                  Spotify provides audio features and analysis for every single\n                  track in their database, but they restrict this data for only\n                  developers to see.\n                  <br></br>\n                  These audio features and analysis are also known as{\" \"}\n                  <b>track attributes</b>. <br></br>\n                  With Explorify, you can adjust these track attributes to your\n                  liking - leading you to explore more songs based on those\n                  redeeming qualities in supplement to your reference tracks!\n                  <br></br>\n                  Go ahead and learn about these track attributes in the{\" \"}\n                  <b>Book of Track Attributes</b>, then scroll down to the{\" \"}\n                  <b>Control Panel</b> in Step 3 to modify them yourself.\n                </Typography>\n                {/* <Card className={classes.book}> */}\n\n                <BookOfTrackAttributes />\n                {/* </Card> */}\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box>\n            <Card className={classes.step_root}>\n              <CardContent>\n                <Typography className={classes.step_header}>\n                  Step 3: Fine Tune Your Track Attributes\n                </Typography>\n                <Typography\n                  className={classes.step_desc}\n                  style={{ paddingBottom: 15 }}\n                >\n                  In this step, you have the ability to fine tune specific track\n                  attributes that you want to look for in your recommended\n                  songs. <br></br> Based on the track attributes up above, go\n                  ahead and <b>check</b> the ones you want to modify. <br></br>\n                  Then,{\" \"}\n                  <b>\n                    drag either just the min, the max, or both the min and max\n                    sliders\n                  </b>{\" \"}\n                  to really specify your desired range!\n                </Typography>\n                <RecBoards onChange={set_rec_values} />\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box>\n            <Card className={classes.step_root}>\n              <CardContent>\n                <Typography className={classes.step_header}>\n                  Step 4: Get Your Results\n                </Typography>\n                <Typography\n                  className={classes.step_desc}\n                  style={{ paddingBottom: 15 }}\n                >\n                  Press the big <b>Get Recommendations</b> button to retrieve\n                  your results! <br></br>\n                  Go ahead and click the button as many times as you want until\n                  you get a set of results that you like. <br></br> If you wish\n                  to save your results, scroll down to{\" \"}\n                  <b>Create Your Playlist</b> and <b>Export Your Results</b> to\n                  the playlist!\n                </Typography>\n                <Button\n                  className={classes.get_rec_button}\n                  variant={\"contained\"}\n                  onClick={get_recommendations}\n                  style={{ marginTop: -25 }}\n                >\n                  {/* <Typography classes={classes.get_rec_button_font}> */}\n                  GET RECOMMENDATIONS\n                  {/* </Typography> */}\n                  <DirectionsRunIcon style={{ marginLeft: 5, fontSize: 28 }} />\n                </Button>\n                {results && <RecommendationResults results={results} />}\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Box>\n            <Card className={classes.step_root}>\n              <CardContent>\n                <Typography className={classes.step_header}>\n                  Step 5: Create Your Playlist and Export Your Results\n                </Typography>\n                <Typography\n                  className={classes.step_desc}\n                  style={{ paddingBottom: 15 }}\n                >\n                  Press <b>Create Playlist</b>. Then, press{\" \"}\n                  <b>Export to Playlist</b>. <br></br>\n                  <b>Note:</b> Once you have created your playlist, the{\" \"}\n                  <b>Create Your Playlist</b> button will be disabled! But, the{\" \"}\n                  <b>Export Your Results</b> button is still available.{\" \"}\n                  <br></br> <b>What does this mean?</b> You can go back to\n                  modify your reference tracks, tune your track attributes, and\n                  get your recommendations over and over again. Once you are\n                  ready, just press <b>Export To Playlist</b> again to keep\n                  stacking your results top of the playlist that you already\n                  created.\n                  <br></br>This way, you'll have one gigantic playlist of new\n                  songs that you can put on shuffle (and not 20 new playlists).\n                </Typography>\n                <Grid container className={classes.gridContainer}>\n                  <Grid item align=\"center\" xs={6}>\n                    <Button\n                      className={classes.get_rec_button}\n                      variant={\"contained\"}\n                      style={{\n                        margin: \"auto\",\n\n                        color: \"#2b2d42\",\n                        justify: \"center\",\n                      }}\n                      disabled={disabled}\n                      onClick={() => create_playlist()}\n                    >\n                      Create Your Playlist\n                      <AddBoxIcon style={{ marginLeft: 5, fontSize: 28 }} />\n                    </Button>\n                  </Grid>\n                  <Grid item align=\"center\" xs={6}>\n                    <Button\n                      className={classes.get_rec_button}\n                      variant={\"contained\"}\n                      style={{\n                        margin: \"auto\",\n\n                        color: \"#2b2d42\",\n                        justify: \"center\",\n                      }}\n                      disabled={preventGetYourResults}\n                      onClick={export_to_playlist}\n                    >\n                      Export Your Results\n                      <QueueMusicIcon style={{ marginLeft: 5, fontSize: 28 }} />\n                    </Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Box>\n        </Grid>\n        <Grid item xs={12} align=\"center\">\n          <Typography\n            style={{\n              fontFamily: \"Inter\",\n              fontSize: \"1.3em\",\n              fontWeight: \"500\",\n              paddingBottom: \"50px\",\n              color: \"#fff\",\n            }}\n          >\n            Thank you for trying this out! Learn more about me at:{\" \"}\n            <a href=\"https://www.xinwang.me\" target=\"_blank\" rel=\"noreferrer\">\n              https://www.xinwang.me.\n            </a>\n          </Typography>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default Explorify;\n","/Users/xinwng/Projects/Explorify/client/src/component/search_bar.js",["60","61","62"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  makeStyles,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  Box,\n} from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport SearchResults from \"./search_results\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"5px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  search_bar: {\n    display: \"flex\",\n    \"flex-direction\": \"row\",\n    maxWidth: 500,\n    justify: \"center\",\n    padding: 7,\n    margin: \"auto\",\n    backgroundColor: \"#ffe8d6\",\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n    borderRadius: 10,\n    // minHeight: 150,\n    marginBottom: 30,\n  },\n  search_result: {\n    // paddingTop: -10,\n    // marginTop: -20,\n    color: \"#000\",\n  },\n  selected_seeds: {\n    // paddingTop: 10,\n    // marginTop: 20,\n    maxWidth: 400,\n  },\n  selected_seeds_header: {\n    fontSize: 18,\n    marginTop: -5,\n    fontWeight: \"600\",\n    marginLeft: 13,\n    textAlign: \"left\",\n    // paddingTop: 3,\n    // marginTop: 20,\n    // maxWidth: 350,\n  },\n  selected_seeds_songs: {\n    fontSize: 14,\n    lineHeight: 2,\n    marginLeft: 20,\n    textAlign: \"left\",\n    // fontWeight: \"600\",\n    // paddingTop: 3,\n    // marginTop: 20,\n    // maxWidth: 350,\n  },\n});\n\nexport default function SearchBar({ auth, onChange }) {\n  const classes = useStyles();\n  const { token } = auth;\n\n  const [search_result, set_search_result] = useState([]);\n  const [search_string, set_search_string] = useState(\"\");\n  const [seleceted_seeds, set_selected_seeds] = useState([]);\n\n  async function spotify_search_songs() {\n    const url = \"https://api.spotify.com/v1/search\";\n    const search_query = encodeURIComponent(search_string);\n    // console.log(\"search_query\", search_query);\n    const search_type_query = \"type=track\";\n    // console.log(\"token\", token);\n    const { data } = await axios.get(\n      `${url}?q=${search_query}&${search_type_query}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(data);\n    if (data && data.tracks) {\n      set_search_result(data.tracks.items);\n    }\n  }\n\n  useEffect(() => {\n    onChange(seleceted_seeds);\n  }, [onChange, seleceted_seeds]);\n\n  // console.log(\"search_result\", search_result);\n\n  return (\n    <Grid\n      container\n      // style={{ \"align-items\": \"flex-end\" }}\n      spacing={0}\n      justify=\"center\"\n    >\n      <Grid item xs={12}>\n        <Box className={classes.search_bar}>\n          <TextField\n            id={\"outlined-basic\"}\n            variant={\"outlined\"}\n            placeholder=\"enter reference tracks...\"\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={(e) => set_search_string(e.target.value)}\n            onKeyDown={(e) => {\n              console.log(e.key);\n              if (e.key === \"Enter\") {\n                spotify_search_songs();\n              }\n            }}\n            value={search_string}\n          ></TextField>\n          <Button\n            style={{\n              marginLeft: 5,\n              backgroundColor: \"#B7B7A4\",\n              color: \"#2b2d42\",\n            }}\n            onClick={spotify_search_songs}\n            variant=\"contained\"\n          >\n            <MusicNoteIcon style={{ fontSize: 35 }} />\n          </Button>\n        </Box>\n      </Grid>\n      {/* <Grid item xs={12} sm={6}> */}\n      <Box className={classes.search_results}>\n        <SearchResults results={search_result} onChange={set_selected_seeds} />\n      </Box>\n      {/* </Grid> */}\n      {/* <Grid item xs={12} sm={6}> */}\n      {/* <Typography className={classes.selected_seeds_header}>\n          Your selected seeds will appear here\n        </Typography> */}\n      {/* <Paper className={classes.selected_seeds}>\n          {seleceted_seeds.map((songs, index) => (\n            <Typography className={classes.selected_seeds_songs}>\n              {index + 1}. {songs}\n            </Typography>\n          ))}\n        </Paper>\n      </Grid> */}\n    </Grid>\n  );\n}\n","/Users/xinwng/Projects/Explorify/client/src/component/search_results.js",["63"],"import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  ListItem,\n  List,\n  ListItemIcon,\n  ListItemText,\n  Checkbox,\n  makeStyles,\n  Typography,\n  Avatar,\n  Grid,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  checkboxes_root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  checkboxes_icon: {\n    borderRadius: 3,\n    width: 18,\n    height: 18,\n    boxShadow:\n      \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\n    backgroundColor: \"#f5f8fa\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\n    \"$root.Mui-focusVisible &\": {\n      outline: \"2px auto rgba(19,124,189,.6)\",\n      outlineOffset: 2,\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#ebf1f5\",\n    },\n    \"input:disabled ~ &\": {\n      boxShadow: \"none\",\n      background: \"rgba(206,217,224,.5)\",\n    },\n  },\n  checked_icon: {\n    backgroundColor: \"#137cbd\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\n    \"&:before\": {\n      display: \"block\",\n      width: 18,\n      height: 18,\n      backgroundImage:\n        \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\n        \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\n        \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\n      content: '\"\"',\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#106ba3\",\n    },\n  },\n  grid_container: {\n    direction: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  search_results: {\n    // paddingTop: 15,\n    // paddingLeft: 20,\n    // marginTop: 15,\n    // width: 500,\n    backgroundColor: \"#ffe8d6\",\n    borderRadius: 10,\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n  },\n  cover_art: {\n    marginLeft: -25,\n    marginRight: 10,\n    // width: theme.spacing(5.5),\n    width: theme.spacing(5.8),\n    // height: theme.spacing(5.5),\n    height: theme.spacing(5.8),\n  },\n  track_name: {\n    fontSize: 15,\n    fontWeight: 500,\n    // fontSize: 13.5,\n    color: \"#000\",\n  },\n  artist_name: {\n    fontSize: 13,\n    // fontSize: 11,\n    color: \"#000\",\n  },\n}));\n\nexport default function SearchResults({ results, onChange }) {\n  const classes = useStyles();\n  const [checked, set_checked] = useState([]);\n  const [seeds, set_seeds] = useState([]);\n  console.log(checked);\n\n  const handle_toggle = (value, name) => () => {\n    const cur_index = checked.indexOf(value);\n    const new_checked = [...checked];\n    const new_seed = [...seeds];\n    if (cur_index === -1) {\n      if (checked.length < 5) {\n        new_checked.push(value);\n        new_seed.push(name);\n      }\n    } else {\n      new_checked.splice(cur_index, 1);\n      new_seed.splice(cur_index, 1);\n    }\n    set_checked(new_checked);\n    set_seeds(new_seed);\n    console.log(\"seeds\", seeds);\n    onChange(new_checked);\n    // onChange(new_seed);\n  };\n\n  return (\n    <Grid container className={classes.grid_container}>\n      <Grid item xs={12} className={classes.search_results}>\n        <List>\n          {results.slice(0, 10).map((item, index) => (\n            <ListItem\n              key={item.id}\n              button\n              onClick={handle_toggle(item.id, item.name)}\n              // margin={-4}\n              style={{ maxWidth: 500 }}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  className={classes.checkboxes_root}\n                  checkedIcon={\n                    <span\n                      className={clsx(\n                        classes.checkboxes_icon,\n                        classes.checked_icon\n                      )}\n                    />\n                  }\n                  icon={<span className={classes.checkboxes_icon} />}\n                  inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n                  disableRipple={true}\n                  edge={\"start\"}\n                  checked={checked.indexOf(item.id) !== -1}\n                  tabIndex={-1}\n                />\n              </ListItemIcon>\n              <Avatar\n                src={item.album.images[2].url}\n                variant=\"square\"\n                className={classes.cover_art}\n              ></Avatar>\n\n              <ListItemText>\n                <Typography className={classes.track_name}>\n                  {item.name}\n                </Typography>\n                <Typography className={classes.artist_name}>\n                  {item.artists[0].name}\n                </Typography>\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n      </Grid>\n    </Grid>\n  );\n}\n","/Users/xinwng/Projects/Explorify/client/src/component/rec_boards.js",["64","65"],"import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  Grid,\n  Typography,\n  Slider,\n  Checkbox,\n  makeStyles,\n  Paper,\n  Card,\n  CardContent,\n  Box,\n  Avatar,\n} from \"@material-ui/core\";\n/* \n1. key: The key of the object is the name of our metric\n2. value: specifies the current set value of our nob\n3. enabled: whether or not this nob is enabled (whether or not the user wants to include this metric in their search)\n4. min: what is the minimum value this nob can be\n5. max: what is the maximum value this nob can be\n6. step: what increments does the slider change value\n*/\nconst useStyles = makeStyles((theme) => ({\n  checkboxes_root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  checkboxes_icon: {\n    borderRadius: 3,\n    width: 16,\n    height: 16,\n    boxShadow:\n      \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\n    backgroundColor: \"#f5f8fa\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\n    \"$root.Mui-focusVisible &\": {\n      outline: \"2px auto rgba(19,124,189,.6)\",\n      outlineOffset: 2,\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#ebf1f5\",\n    },\n    \"input:disabled ~ &\": {\n      boxShadow: \"none\",\n      background: \"rgba(206,217,224,.5)\",\n    },\n  },\n  checked_icon: {\n    backgroundColor: \"#137cbd\",\n    backgroundImage:\n      \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\n    \"&:before\": {\n      display: \"block\",\n      width: 16,\n      height: 16,\n      backgroundImage:\n        \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\n        \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\n        \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\n      content: '\"\"',\n    },\n    \"input:hover ~ &\": {\n      backgroundColor: \"#106ba3\",\n    },\n  },\n  paper_root: {\n    padding: 10,\n    width: \"100%\",\n    borderRadius: 10,\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n    backgroundColor: \"#ffe8d6\",\n  },\n  // rec_font: {\n  //   color: \"#000\",\n  //   // backgroundColor: \"#B5838D\",\n  //   // backgroundColor: \"#FFCDB2\",\n  // },\n  rec_card_root: {\n    maxWidth: 925,\n    // height: \"250px\",\n    marginBottom: 30,\n    borderRadius: 10,\n  },\n  rec_font: {\n    // color: \"#000\",\n    color: \"#2b2d42\",\n    fontFamily: \"Sawarabi Mincho\",\n    paddingTop: 20,\n    fontWeight: 1000,\n    fontSize: \"2.4em\",\n    textAlign: \"center\",\n  },\n  rec_font_2: {\n    // color: \"#000\",\n    color: \"#000\",\n    // fontFamily: \"Concert One\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 700,\n    fontSize: \"1.2em\",\n    textAlign: \"left\",\n  },\n  rec_font_3: {\n    color: \"#2b2d42\",\n    fontFamily: \"Arvo\",\n    fontSize: \"1.2em\",\n    textAlign: \"center\",\n    marginTop: -10,\n  },\n  track_attribute_image: {\n    margin: 10,\n    width: theme.spacing(9),\n    height: theme.spacing(9),\n  },\n  rec_root: {\n    // padding: 5,\n    marginTop: 15,\n    marginBottom: 10,\n    maxWidth: 825,\n    maxHeight: 100,\n    backgroundColor: \"#C9C9BA\",\n    // backgroundColor: \"transparent\",\n    // border: \"2px solid #000\",\n    marginLeft: 5,\n    marginRight: 5,\n    borderRadius: 10,\n  },\n  cb: {\n    maxWidth: 925,\n    // height: \"250px\",\n    // marginBottom: 30,\n    borderRadius: 10,\n    backgroundColor: \"#ffe8d6\",\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n  },\n  cb_title: {\n    color: \"#2b2d42\",\n    // fontFamily: \"Sawarabi Mincho\",\n    fontFamily: \"Arvo\",\n    paddingTop: 10,\n    paddingBottom: 5,\n    // fontWeight: 1000,\n    fontSize: \"2.4em\",\n    textAlign: \"center\",\n  },\n  cb_paper: {\n    backgroundColor: \"transparent\",\n    padding: 5,\n  },\n}));\n\nconst recs = {\n  acousticness: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  danceability: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  energy: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  instrumentalness: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  liveness: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  loudness: {\n    value: [-60, 0],\n    enabled: false,\n    min: -60,\n    max: 0,\n  },\n  popularity: {\n    value: [0, 100],\n    enabled: false,\n    min: 0,\n    max: 100,\n    step: 1,\n  },\n  speechiness: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n  tempo: {\n    value: [0, 200],\n    enabled: false,\n    min: 0,\n    max: 200,\n    step: 1,\n  },\n  valence: {\n    value: [0, 1],\n    enabled: false,\n    min: 0,\n    max: 1,\n    step: 0.01,\n  },\n};\n\nexport default function RecBoards({ onChange }) {\n  const classes = useStyles();\n  const [board_values, set_board_values] = useState(recs);\n  const handle_change = (rec, value) => {\n    const new_board_values = { ...board_values };\n    new_board_values[rec].value = value;\n    set_board_values(new_board_values);\n  };\n\n  const toggle_rec = (rec, value) => {\n    const new_board_values = { ...board_values };\n    new_board_values[rec].enabled = value;\n    set_board_values(new_board_values);\n  };\n\n  useEffect(() => {\n    onChange(board_values);\n  }, [onChange, board_values]);\n\n  return (\n    <Card className={classes.cb}>\n      <CardContent>\n        <Typography className={classes.cb_title}>Control Panel 🎛</Typography>\n      </CardContent>\n      <Grid\n        container\n        direction=\"row\"\n        spacing={0}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        {Object.keys(recs).map((rec) => (\n          <Grid item xs={12} sm={6} align=\"center\">\n            <Paper className={classes.cb_paper} variant=\"outlined\">\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <Grid item xs={12} align=\"center\">\n                  <Typography className={classes.rec_font_2}>\n                    <Checkbox\n                      className={classes.checkboxes_root}\n                      disableRipple\n                      color=\"default\"\n                      style={{ marginLeft: 8 }}\n                      checkedIcon={\n                        <span\n                          className={clsx(\n                            classes.checkboxes_icon,\n                            classes.checked_icon\n                          )}\n                        />\n                      }\n                      icon={<span className={classes.checkboxes_icon} />}\n                      inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n                      checked={board_values[rec].enabled}\n                      onChange={(e, newValue) => toggle_rec(rec, newValue)}\n                    />\n                    {rec}\n                  </Typography>\n                </Grid>\n                <Grid item xs={1}>\n                  <Typography className={classes.rec_font_3}>min</Typography>\n                </Grid>\n                <Grid item xs={12} sm={8}>\n                  <Slider\n                    disabled={!board_values[rec].enabled}\n                    value={board_values[rec].value}\n                    onChange={(e, new_value) => handle_change(rec, new_value)}\n                    valueLabelDisplay={\"auto\"}\n                    aria-labelledby={\"range-slider\"}\n                    min={recs[rec].min}\n                    max={recs[rec].max}\n                    step={recs[rec].step}\n                    style={{ marginTop: -3 }}\n                  />\n                </Grid>\n                <Grid item xs={1}>\n                  <Typography className={classes.rec_font_3}>max</Typography>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </Card>\n\n    // <Grid\n    //   container\n    //   spacing={2}\n    //   style={{ padding: 0 }}\n    //   justify=\"center\"\n    //   direction=\"row\"\n    // >\n    //   <Grid item xs={12}>\n    //     <Card\n    //       className={classes.rec_card_root}\n    //       style={{\n    //         backgroundColor: \"#ffe8d6\",\n    //         boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n    //         paddingBottom: 30,\n    //       }}\n    //     >\n    //       <Typography className={classes.rec_font}>Control Panel 🎮</Typography>\n    //       {Object.keys(recs).map((rec) => (\n    //         <Grid item xs={5}>\n    //           <Paper className={classes.rec_root} variant=\"elevation\">\n    //             <CardContent style={{}}>\n    //               <Typography className={classes.rec_font_2}>\n    //                 <Checkbox\n    //                   className={classes.checkboxes_root}\n    //                   disableRipple\n    //                   color=\"default\"\n    //                   style={{ marginLeft: -6 }}\n    //                   checkedIcon={\n    //                     <span\n    //                       className={clsx(\n    //                         classes.checkboxes_icon,\n    //                         classes.checked_icon\n    //                       )}\n    //                     />\n    //                   }\n    //                   icon={<span className={classes.checkboxes_icon} />}\n    //                   inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n    //                   checked={board_values[rec].enabled}\n    //                   onChange={(e, newValue) => toggle_rec(rec, newValue)}\n    //                 />\n    //                 {rec}\n    //               </Typography>\n    //               <Grid container style={{ paddingTop: 5 }}>\n    //                 <Grid item xs={1} align=\"right\">\n    //                   <Typography className={classes.rec_font_3}>\n    //                     min\n    //                   </Typography>\n    //                 </Grid>\n    //                 <Grid item xs={10} align=\"center\" justify=\"center\">\n    //                   <Slider\n    //                     disabled={!board_values[rec].enabled}\n    //                     value={board_values[rec].value}\n    //                     onChange={(e, new_value) =>\n    //                       handle_change(rec, new_value)\n    //                     }\n    //                     valueLabelDisplay={\"auto\"}\n    //                     aria-labelledby={\"range-slider\"}\n    //                     min={recs[rec].min}\n    //                     max={recs[rec].max}\n    //                     step={recs[rec].step}\n    //                     style={{ marginTop: -3 }}\n    //                   />\n    //                 </Grid>\n    //                 <Grid item xs={1}>\n    //                   <Typography className={classes.rec_font_3}>\n    //                     max\n    //                   </Typography>\n    //                 </Grid>\n    //               </Grid>\n    //             </CardContent>\n    //           </Paper>\n    //         </Grid>\n    //       ))}\n    //     </Card>\n    //   </Grid>\n    // </Grid>\n\n    // <Grid container spacing={0} style={{ padding: 0 }} justify=\"center\">\n    //   <Paper elevation={3} className={classes.paper_root}>\n    //     {/* <Grid item xs={12}>  */}\n    //     {Object.keys(recs).map((rec) => (\n    //       <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n    //         <Checkbox\n    //           className={classes.checkboxes_root}\n    //           disableRipple\n    //           color=\"default\"\n    //           checkedIcon={\n    //             <span\n    //               className={clsx(\n    //                 classes.checkboxes_icon,\n    //                 classes.checked_icon\n    //               )}\n    //             />\n    //           }\n    //           icon={<span className={classes.checkboxes_icon} />}\n    //           inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n    //           checked={board_values[rec].enabled}\n    //           onChange={(e, newValue) => toggle_rec(rec, newValue)}\n    //         />\n    //         <div style={{ flex: 1 }}>\n    //           <Grid container>\n    //             <Typography className={classes.font_color}>{rec}</Typography>\n    //             <Grid container spacing={1}>\n    //               <Grid item>\n    //                 <Typography className={classes.font_color}>min</Typography>\n    //               </Grid>\n    //               <Grid item xs>\n    //                 <Slider\n    //                   disabled={!board_values[rec].enabled}\n    //                   value={board_values[rec].value}\n    //                   onChange={(e, new_value) => handle_change(rec, new_value)}\n    //                   valueLabelDisplay={\"auto\"}\n    //                   aria-labelledby={\"range-slider\"}\n    //                   min={recs[rec].min}\n    //                   max={recs[rec].max}\n    //                   step={recs[rec].step}\n    //                 />\n    //               </Grid>\n    //               <Grid item>\n    //                 <Typography className={classes.font_color}>max</Typography>\n    //               </Grid>\n    //             </Grid>\n    //           </Grid>\n    //         </div>\n    //       </div>\n    //     ))}\n    //     {/* </Grid> */}\n    //   </Paper>\n    // </Grid>\n  );\n}\n","/Users/xinwng/Projects/Explorify/client/src/component/rec_results.js",["66","67","68","69","70","71"],"import React from \"react\";\nimport {\n  Grid,\n  makeStyles,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Avatar,\n  Paper,\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    direction: \"row\",\n    padding: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  gridContainer2: {\n    direction: \"row\",\n    padding: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 10,\n  },\n  // cover_art: {\n  //   width: theme.spacing(9),\n  //   height: theme.spacing(9),\n  // },\n  track_name: {\n    marginTop: 5,\n    width: \"100%\",\n    fontSize: \"1em\",\n    fontWeight: 600,\n    textAlign: \"center\",\n    backgroundColor: \"none\",\n  },\n  artist_name: {\n    width: \"100%\",\n    fontSize: \"1em\",\n    textAlign: \"center\",\n    // top: \"20%\",\n    // position: \"absolute\",\n  },\n  paper_result: {\n    position: \"relative\",\n    width: \"180px\",\n    height: \"220px\",\n    // minHeight: \"300px\",\n    marginBottom: 30,\n    borderRadius: 10,\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.3)\",\n    backgroundColor: \"#ffe8d6\",\n  },\n}));\n\nconst RecommendationResults = ({ results }) => {\n  console.log(\"results\", results);\n  const classes = useStyles();\n\n  // const return_track_name = ({ track_name }) => {\n  //   console.log(\"track_name\", track_name);\n  //   return track_name;\n  // };\n\n  if (!results.tracks || results.tracks.length === 0) {\n    return (\n      <Typography>\n        Sorry, I couldn't find any results! Your modifications were too\n        specific! Try selecting less track attributes or less referencee tracks.\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container className={classes.gridContainer}>\n      <Grid container spacing={3} className={classes.gridContainer2}>\n        {results.tracks.map((track) => (\n          <Grid item align=\"center\">\n            <Card className={classes.paper_result}>\n              <CardContent\n                styles={{\n                  alignItems: \"center\",\n                  align: \"center\",\n                  justify: \"center\",\n                }}\n              >\n                <CardMedia\n                  style={{ position: \"relative\", width: \"60%\", height: \"50%\" }}\n                  component=\"img\"\n                  image={track.album.images[2].url}\n                ></CardMedia>\n                <Typography className={classes.track_name}>\n                  {track.name}\n                </Typography>\n                <Typography noWrap className={classes.artist_name}>\n                  {track.artists[0].name}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RecommendationResults;\n","/Users/xinwng/Projects/Explorify/client/src/component/get_user_data.js",["72"],"/Users/xinwng/Projects/Explorify/client/src/pre_pages/login_page.js",[],"/Users/xinwng/Projects/Explorify/client/src/pre_pages/loading.js",["73","74","75"],"import React from \"react\";\nimport {\n  Grid,\n  Box,\n  Card,\n  CardContent,\n  CardMedia,\n  CardActionArea,\n  makeStyles,\n  Button,\n  styled,\n  Typography,\n  ThemeProvider,\n  createMuiTheme,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginTop: 20,\n    fontSize: \"4.5em\",\n    fontFamily: \"Kiwi Maru\",\n    fontWeight: 500,\n  },\n  desc_root: {\n    maxWidth: 500,\n    margin: \"auto\",\n    borderRadius: 5,\n    position: \"relative\",\n    boxShadow: \"0 3px 5px 2px rgba(0, 0, 0, .1)\",\n  },\n  desc_content: { padding: 20 },\n  desc_cta: {\n    display: \"block\",\n    textAlign: \"justify\",\n    color: \"black\",\n    fontSize: 20,\n  },\n  desc_title: {\n    color: \"black\",\n    letterSpacing: \"1x\",\n    fontSize: 25,\n    textAlign: \"center\",\n    marginTop: 5,\n  },\n}));\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Kanit\", \"Kiwi Maru\"],\n  },\n  palette: {\n    background: {\n      default: \"#E2E2E2\",\n    },\n  },\n});\n\nconst LoginButton = styled(Button)({\n  background:\n    \"linear-gradient(to right, #b2c9d4, #b8c4da, #c8bdd7, #d9b6ca, #e3b2b4)\",\n  border: 0,\n  borderRadius: 10,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  // boxShadow: \"5px 5px 15px 5px rgba(214,223,193,.5)\",\n  color: \"black\",\n  fontSize: 20,\n  fontWeight: 400,\n  height: 45,\n  padding: \"0 30px\",\n});\n\nfunction Loading() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={5}\n        >\n          <Grid item>\n            <Typography className={classes.title}>explorify</Typography>\n          </Grid>\n          <Grid item>\n            <Card className={classes.desc_root}>\n              <CardContent className={classes.desc_content}>\n                <Typography className={classes.desc_title} variant=\"h5\">\n                  Uh oh... Something went wrong!\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item>\n            <LoginButton\n              href=\"/auth/login\"\n              endIcon={<ExitToAppIcon />}\n              disabled\n            >\n              LOGIN WITH SPOTIFY\n            </LoginButton>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default Loading;\n","/Users/xinwng/Projects/Explorify/client/src/component/book_track_attribute.js",["76"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Avatar,\n} from \"@material-ui/core\";\nimport acousticness from \"../icon/acousticness.png\";\nimport danceability from \"../icon/danceability.png\";\nimport instrumental from \"../icon/instrumental.png\";\nimport loudness2 from \"../icon/loudness2.png\";\nimport popularity from \"../icon/popularity.png\";\nimport tempo from \"../icon/tempo.png\";\nimport valence from \"../icon/valence.png\";\nimport liveness from \"../icon/liveness.png\";\nimport speechiness from \"../icon/speechiness.png\";\nimport energy from \"../icon/energy.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    padding: 10,\n    spacing: 10,\n    alignItems: \"center\",\n    direction: \"row\",\n  },\n  gridItem: {\n    backgroundColor: \"#FFB4A2\",\n    background: \"#000\",\n    color: \"#000\",\n  },\n  nav_title: {\n    padding: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    placeItems: \"left\",\n    fontSize: \"1.5rem\",\n    fontFamily: \"Kiwi Maru\",\n  },\n  step_root: {\n    // align: \"center\",\n    padding: 10,\n    maxWidth: 1000,\n    marginBottom: 50,\n    backgroundColor: \"#ddbea9\",\n    borderRadius: 10,\n  },\n  step_header: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.55em\",\n    marginBottom: 10,\n    fontWeight: \"600\",\n  },\n  step_desc: {\n    color: \"black\",\n    textAlign: \"left\",\n    fontSize: \"1.1em\",\n    marginBottom: 20,\n  },\n  card: {\n    // backgroundColor: \"FFB4A2\",\n  },\n  card_content: {\n    // backgroundColor: \"#FFB4A2\",\n  },\n\n  track_attribute_card_1: {\n    width: \"275px\",\n    height: \"400px\",\n    marginBottom: 30,\n    borderRadius: 10,\n  },\n\n  track_attribute_font_title: {\n    color: \"#000\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 700,\n    fontSize: \"1.5em\",\n  },\n  track_attribute_font_title_2: {\n    color: \"#fff\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 700,\n    fontSize: \"1.5em\",\n  },\n  track_attribute_font_type: {\n    color: \"#000\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 600,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_type_2: {\n    color: \"#fff\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 600,\n    fontSize: \"1.3em\",\n  },\n  track_attribute_font_content: {\n    marginTop: -10,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#18181F\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 600,\n    fontSize: \"1.05em\",\n    textAlign: \"center\",\n  },\n  track_attribute_font_content_2: {\n    marginTop: -10,\n    paddingLeft: 5,\n    paddingRight: 5,\n    color: \"#fff\",\n    fontFamily: \"Arvo\",\n    // fontWeight: 600,\n    fontSize: \"1.05em\",\n    textAlign: \"center\",\n    // lineSpacing: \"10\",\n  },\n  track_attribute_image: {\n    margin: 10,\n    width: theme.spacing(9),\n    height: theme.spacing(9),\n  },\n  book: {\n    maxWidth: 925,\n    // height: \"250px\",\n    // marginBottom: 30,\n    borderRadius: 10,\n    backgroundColor: \"#ffe8d6\",\n    boxShadow: \"2px 2px 7px rgba(0, 0, 0, 0.4)\",\n  },\n  book_title: {\n    color: \"#2b2d42\",\n    // fontFamily: \"Sawarabi Mincho\",\n    fontFamily: \"Arvo\",\n    paddingTop: 10,\n    paddingBottom: 5,\n    // fontWeight: 1000,\n    fontSize: \"2.4em\",\n    textAlign: \"center\",\n  },\n}));\n\nexport default function BookOfTrackAttributes() {\n  const classes = useStyles();\n  return (\n    <Card className={classes.book}>\n      <CardContent>\n        <Typography className={classes.book_title}>\n          Book of Track Attributes 📖\n        </Typography>\n      </CardContent>\n      <Grid\n        container\n        direction=\"row\"\n        spacing={2}\n        style={\n          {\n            // paddingLeft: 45,\n          }\n        }\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#BDBAD5\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                acousticness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={acousticness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: context\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                tracks with <i>higher</i> acousticness indicate tracks with{\" \"}\n                <i>more</i> featurings of guitars, pianos, drumsets, etc.\n                whereas, <i>lower</i> acousticness indicate tracks with\n                <i> more</i> featurings of electronic or synthesized elements.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#124E78\", color: \"#fff\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                danceability\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={danceability}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                an overall measurement of a track's suitability for dancing\n                based on musical elements including tempo, rhythm, beat\n                strength, and more.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#F49D6E\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                energy\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={energy}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                an overall measurement of a track's intensity & activity.{\" \"}\n                <i>higher</i> energy will restrict results to fast, loud, and\n                noisy songs. psst: heavy metal = higher energy & mozart = lower\n                energy\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#F2CD5D\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                instrumentalness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={instrumental}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                predicts whether a track contains vocals. rap songs are more\n                vocal, whereas lofi study music are less vocal. the higher the\n                value, the more likely the track contains NO vocal content.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#C0D6DF\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                liveness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={liveness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: context\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                liveness detects the presence of an audience in the recording.{\" \"}\n                <i>higher</i> liveness will lead you to more tracks that were\n                probably performed live. increase this value if you want to find\n                tracks that are maybe from an artist's concert.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#FFA69E\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title}>\n                loudness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={loudness2}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content}>\n                loudness represents an overall measurement of the decibels (dB)\n                throughout a track. setting a <i>higher</i> loudness will lead\n                you to songs that are more fun to blast on the speakers!\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#BB342F\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                popularity\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={popularity}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: other\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                popularity provides a measure of - well - how popular you want\n                the tracks in your results to be. set it <i>lower</i> if you\n                want to discover more low-key songs, and set it <i>higher</i> if\n                you want to continue jamming out to tracks just as popular as\n                Despacito or Gangnam Style.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#758E4F\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                speechiness\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={speechiness}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: properties\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                kind of similar to instrumental, but inverse. setting\n                speechiness to a <i>higher</i> value will lead you to songs that\n                have a <i>higher</i> amount of spoken words. psst: setting this\n                high will get you songs like Rap God by Eminem.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#AA4465\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                tempo\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={tempo}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                tempo means beats per minute! setting a tempo range = beats per\n                minute range. setting minimum tempo to 140 restricts results to\n                only those tracks with a tempo of greater than 140 bpm.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card\n            className={classes.track_attribute_card_1}\n            style={{ backgroundColor: \"#462255\" }}\n          >\n            <CardContent>\n              <Typography className={classes.track_attribute_font_title_2}>\n                valence\n              </Typography>\n              <Avatar\n                variant=\"square\"\n                src={valence}\n                className={classes.track_attribute_image}\n              ></Avatar>\n              <CardContent>\n                <Typography className={classes.track_attribute_font_type_2}>\n                  type: mood\n                </Typography>\n              </CardContent>\n              <Typography className={classes.track_attribute_font_content_2}>\n                valence will control how happy a song sounds! tracks with higher\n                valence sounds more happy & positive. tracks with lower valence\n                sounds more negative (sad, angry, etc.)\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":33},{"ruleId":"81","severity":1,"message":"85","line":13,"column":3,"nodeType":"83","messageId":"84","endLine":13,"endColumn":9},{"ruleId":"81","severity":1,"message":"86","line":191,"column":24,"nodeType":"83","messageId":"84","endLine":191,"endColumn":37},{"ruleId":"81","severity":1,"message":"87","line":269,"column":13,"nodeType":"83","messageId":"84","endLine":269,"endColumn":17},{"ruleId":"81","severity":1,"message":"88","line":5,"column":3,"nodeType":"83","messageId":"84","endLine":5,"endColumn":8},{"ruleId":"81","severity":1,"message":"89","line":9,"column":3,"nodeType":"83","messageId":"84","endLine":9,"endColumn":13},{"ruleId":"81","severity":1,"message":"90","line":12,"column":10,"nodeType":"83","messageId":"84","endLine":12,"endColumn":16},{"ruleId":"81","severity":1,"message":"91","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"92","line":12,"column":3,"nodeType":"83","messageId":"84","endLine":12,"endColumn":6},{"ruleId":"81","severity":1,"message":"93","line":13,"column":3,"nodeType":"83","messageId":"84","endLine":13,"endColumn":9},{"ruleId":"81","severity":1,"message":"94","line":6,"column":3,"nodeType":"83","messageId":"84","endLine":6,"endColumn":7},{"ruleId":"81","severity":1,"message":"95","line":7,"column":3,"nodeType":"83","messageId":"84","endLine":7,"endColumn":11},{"ruleId":"81","severity":1,"message":"96","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":15},{"ruleId":"81","severity":1,"message":"93","line":9,"column":3,"nodeType":"83","messageId":"84","endLine":9,"endColumn":9},{"ruleId":"81","severity":1,"message":"88","line":10,"column":3,"nodeType":"83","messageId":"84","endLine":10,"endColumn":8},{"ruleId":"81","severity":1,"message":"92","line":11,"column":3,"nodeType":"83","messageId":"84","endLine":11,"endColumn":6},{"ruleId":"81","severity":1,"message":"97","line":50,"column":10,"nodeType":"83","messageId":"84","endLine":50,"endColumn":19},{"ruleId":"81","severity":1,"message":"92","line":4,"column":3,"nodeType":"83","messageId":"84","endLine":4,"endColumn":6},{"ruleId":"81","severity":1,"message":"98","line":7,"column":3,"nodeType":"83","messageId":"84","endLine":7,"endColumn":12},{"ruleId":"81","severity":1,"message":"99","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":17},{"ruleId":"81","severity":1,"message":"100","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'closeSnackbar' is assigned a value but never used.","'data' is assigned a value but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'Search' is defined but never used.","'useEffect' is defined but never used.","'Box' is defined but never used.","'Avatar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'user_data' is assigned a value but never used.","'CardMedia' is defined but never used.","'CardActionArea' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]